{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12440\viewh14100\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 10 Steps to Great Developer (Web/FullStack/Microservices/Cloud) - {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=UFW1KC-tMjs&t=872s"}}{\fldrslt 
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://www.youtube.com/watch?v=UFW1KC-tMjs&t=872s}}\
1. Fundamentals\
	1. Programmer\
		1. Language - Java/Python/JS\
			1. 
\b Java
\b0 \
				1. 8, 9, \'85 (all features)\
					1. Functional programming\
					2. Modularization\
				2. Release cycles\
					1. By-yearly - 13, 14\
	2. 
\b Business Domain
\b0 \
	3. Debugging\
		1. Solving problems\
2. Simple Design\
	1. Maintainable code\
		1. Written once and maintained a lifetime\
	2. Code is easy to read\
	3. 
\b 4-Principles of simple design
\b0 \
	4. Design patterns\
		1. 
\b Understand the context and then use it
\b0 	\
	5. OOP - in depth\
		1. SOLID principles\
			2. Write good OO code\
	6. Decoupled application\
3. TDD\
	1. Test first and then code\
		1. Outside in approach\
		2. Usually for APIs\
	2. Improves the design as well\
		1. Adheres to 4 principles of simple design\
	3. Simple test + code + refactor\
4. Great attitude\
	1. Great developers vs good and not so good\
		1. Learn everyday\
		2. 
\b up to date with technology
\b0 \
		3. 
\b Popular frameworks, methodologies, architectures
\b0 , \'85\
		4. Ready to explore new things\
	2. 
\b Work with very smart people (smarter than you) 
\i (Open Source, Big Company)
\i0\b0 \
	3. Look at your project and try and learn from it\
	4. Continuous learning is the key\
	5. BoyScout rule - leave the place better than you found it\
		1. 
\b Leave the code in a better shape than you found it
\b0 \
	6. Questioning why?\
		1. Ask!!!\
			1. Why not this and that for design?\
5. 
\b Master your IDE
\b0 \
	1. Eclipse, IntelliJ, Visual Studio Code\
		1. Master it\
		2. You are going to use for a long time\
	2. Learn\
		1. Shortcuts\
		2. Lesser number of steps\
6. 
\b Architecture
\b0 \
	1. Understand the architecture of the application and surrounding application\
		1. If it is part of the entire enterprise\
	2. Enterprise architecture\
	3. Frameworks + Tools\
	4. Popular architecture\
		1. Evolution of architectures\
			1. SOA\
			2. REST\
			3. Full stack\
			4. Microservices\
			5. Container orchestration\
			6. Cloud\
7. 
\b Become full stack developer
\b0 \
	1. Front end + Backend\
		1. JS/TS\
	2. Learn a framework (React/Angular/View)\
	3. Full-Stack architecture\
8. Containerisation\
	1. Containers & Orchestration\
		1. Docker - simple boxes\
		2. 
\b Kubernetes - manages the containers
\b0 \
			1. Features\
				1. Manage multiple instances of each micro service based on load\
				2. Brings back failed instances\
				3. Scale up and down based on load\
				4. Service registry\
				5. Load balancing\
	2. Platform and language independent deployment\
9. 
\b Microservices and Cloud
\b0 \
	1. Why microservices\
	2. Challenges\
		1. Build and deploy quickly\
		2. Communication between them\
		3. Load balancing\
		4. Configuration (complex)\
		5. Infrastructure support\
	3. How to deploy to cloud\
	4. Cloud\
		1. Auto-provisioning on demand\
		2. Remove un-differentiated heavy lifting\
		3. Centraliz configuration\
		4. Naming server\
		5. API gateway\
		6. High availability\
		7. Deploy in multiple regions\
		8. AWS or GCP or Azure\
10. DevOps\
	1. Mentality - how we think\
		1. Coordination between teams\
			1. Everyone responsible for everything\
			2. Build features in a stable way and release them to production\
		2. To make it happen:\
			1. Write great code\
				1. Code quality\
				2. Tools to automate checking code quality\
					1. Includes manual checking - code reviews\
					2. SonarQube\
					3. HPF\
			2. Build\
				1. Maven/
\b Gradle
\b0 \
				2. Other tools\
			3. Automation tests\
				1. Pyramid model\
					1. Bottom: Unit tests\
					2. Middle: Integration tests (combination of multiple units)\
					3. Top: UI tests - Selenium\
				2. 
\b Spring Boot supports these
\b0 \
			4. IAAC - Infrastructure as Code\
				1. Provisioning of resources automatically using code\
					1. Chef/Puppet/
\b Terraform
\b0 /
\b Ansible
\b0 \
					2. 
\b CloudFormation - AWS
\b0 \
						1. \'85\
		3. Automate construction of environment and deployment\
		4. CI/CD\
			1. Gives immediate feedback\
\
	\
	\
	\
	}