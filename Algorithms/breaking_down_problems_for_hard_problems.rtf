{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12640\viewh14020\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Breaking Down Problems (for harder problems)\
	1. Focus on one particular peace we are doing (don\'92t get confused with many peaces)\
		1. Make peaces to work and bring them together\
\
1. Clean code\
	1. Modularisation\
		1. Single responsibility principle\
			1. Each peace has one responsibility\
		2. Is there a way to break the problem into smaller problems and combine the results in some way\
			1. Logical steps\
				1. controller calls functions in sequence\
		3. Example:\
			1. 0-1 knapsack problem\
				1. find all combinations of items that could go into knapsack\
				2. filters through and finds the one with best value (this does not need to know the previous and vice versa)\
			2. Longest palindromic substring\
				1. Generate all the possible substrings\
				2. Check if each substring is a palindrome or not and keep the max length one\
			3. Almost anything can be broken down this way\
				1. Continually practice and check if there is a way to break the problem apart\
2. Is there a function\'85\
	1. Ask if there is a function that makes the problem easy to solve\
		1. If I had a list of all the combinations of elements that go into the knapsack\
			1. Then it is easy for me to check the combinations and decide the best one\
				1. We can just focus on validation code first (and stub out the other functions)\
	2. Example:\
		1. Word squares\
			1. Given a list of input strings find all word squares\
				1. i th row is same as i th column\
			2. How to approach?\
				1. Function that finds all potential word squares (every possible permutations of input)\
					1. Recursively (n!)\
				2. Validate the word square\
				3. Controller function call both in order\
			3. Another approach:	\
				1. Try to build word squares (using existing words) and find contradictions\
					1. Given first place is taken by one of the words, what is the possibility of placing rest of the words to form a word square\
		2. Trapping rainwater problem\
			1. How to approach?\
				1. Check if each cell contains water (works for fixed range - length and breadth are known)\
					1. Form a grid and check if each cell contains water\
				2. Volume of each column\
		3. Convert numbers into english words\
			1. 123 - One hundred Twenty Three\
			2. 12345 - Twelve thousand Three Hundred Forty five\
			3. \'85\
			4. Approach\
				1. Higher function checks if it is billions or millions or thousands \'85\
				2. Another function handles numbers upto 999\
					1. Special case i < 20\
}