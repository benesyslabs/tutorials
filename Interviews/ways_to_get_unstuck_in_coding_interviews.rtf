{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Ways to get Unstuck: https://www.youtube.com/watch?v=9uoyWWUYb6Y\
1. Find a brute force solution\
	1. Don\'92t try to get perfect solution first\
2. Fully understand the problem\
	1. conceptualise what we are doing at higher level\
	2. Don\'92t get confused about what we are trying to do\
3. Work through the problem by hand\
	1. Don\'92t assume you have a computer\
		1. Just do it by hand\
4. Brainstorm data structures and algorithms we know\
	1. See if they are helpful\
		1. Maze - if we consider it to be graph (we can now use graph algorithms)\
5. Consider all the given information\
	1. Useful to optimise\
6. Simplify the problem\
	1. Solve a simpler problem first (parameters can be changed) (?)\
7. Break the problem into smaller problems (easier to understand, \
	1. Modularisation (breaking into methods)\
	2. smaller version of the problem\
8. Take a step back\
	1. If stuck\
		1. don\'92t experiment on the fly (take a step back)\
			1. Remember what we are trying to accomplish\
9. Collaborate with your interviewer\
	1. Ask questions\
	2. Tell what you are thinking\
		1. Check if they are okay with your thinking\
	3. Helps guide the conversation\
		1. They can guide you to solution\
10. Ask for help\
	1. Get a small hint if not getting solution at all\
		1. Better to complete the whole thing\
\
8 algorithms we must know:\
1. Understand core algorithm and adapt it to situations\
	1. Come up with complex applications:\
		1. Path between nodes\
		2. Can I find path to a node\
2. Data structure manipulation\
	1. For each data structure - deeply understand how it works \
		1. Basics of manipulation of the data structure\
			1. CRUD - know how to work with them\
3. Searching\
	1. DFS, BFS, - other problems\
		1. Example: words in a dictionary that might differ by only one letter\
			1. DFS, BFS\
				1. We can construct graphs between two different states\
4. Combinations & Permutations\
	1. Recursion\
		1. Understand how to generate them\
	2. Find best combination of input\
		1. 0-1 knapsack - greatest value but minimum weight\
			1. Find all combinations (not very efficient) but brute force\
5. Sorting\
	1. Basics of sorting\
		1. We can use built in sort if it is not the problem we are solving\
	2. Partitioning algorithm\
		1. Quick select\
			1. We can use Quick sort as basic strategy\
	3. Sorting complex data structures in language\
6. Binary Search\
	1. More complicated circumstances\
	2. Using strategies\
7. Topological sort\
	1. Pre-conditions sort\
	2. Scheduling problems\
8. Recursion\
	1. 6 different recursion patterns - free e book\
9. Dynamic programming\
	1. free e book\
	2. Optimizations\
}