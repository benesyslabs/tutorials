{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Framework for Data Structures and Algorithms interviews:\
1. What is the difference between data structure and algorithm?\
	1. DS: How we structure data in memory\
	2. Algorithms: How we operate on that data\
1. Three steps:\
	1. Start with core data structure (innermost circle)\
		1. List - how is it stored\
		2. Class - how is it stored\
		3. \'85\
		4. How to study?\
			1. Implement the data structure (to understand how it is stored)\
	2. Core Patterns (middle circle)\
		1. Key algorithms we need to know for the data structures\
			1. How to learn them?\
				1. Look at standard implementations of the data structures\
					1. List interface in Java (say)\
						1. It has following operations:\
							1. Adding element\
							2. Removing element\
							3. Reversing \
							4. Getting nth element\
							5. Length\
							6. Split into half\
							7. Swap nodes\
				2. These are core algorithms of the data structure\
				3. Implement the core algorithms\
	3. Compound algorithms\
		1. Obtained by combining 2 or more of the basic algorithms\
			1. Most of the questions of interview lie here\
		2. Learning how to combining is what we want to learn\
			1. Example: Printing linked list in reverse order\
				1. Reverse linked list\
				2. Iterate through the linked list\
				3. Reverse linked list\
		3. Approach:\
			1. How to break the problem into smaller chunks (into core patterns)\
\
Focus:\
	1. Start at core and expand out\
		1. most important algorithms first\
		2. learn other data structures and algorithms subsequently\
			1. Rebalancing trees\
			2. Priority queues\
			3. A*\
			4. B-Trees}