{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Bold;\f2\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red224\green228\blue231;\red255\green255\blue255;
\red62\green23\blue1;\red19\green19\blue19;\red10\green80\blue1;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c85098;\cssrgb\c90196\c91373\c92549;\cssrgb\c100000\c100000\c100000;
\cssrgb\c31373\c12549\c0;\cssrgb\c9412\c9412\c9412;\cssrgb\c0\c37647\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12600\viewh13800\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Following Linux Technologies are the foundation for building/running container process in system:\
1. Namespaces\
2. Control groups (Cgroups)\
3. Seccomp\
4. SELinux\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf0 Namespaces
\f0\b0 \
1. Provides a layer of isolation for containers\
	1. It gives a view of what appears to be it\'92s own filesystem\
2. Restricts what the process can see and the resources available to the process\
3. Docker uses many namespaces while instantiating an container\
\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
[nivedv@homelab ~]$ sudo lsns -p 29413\
\
\'a0 \'a0 \'a0 \'a0 NS TYPE\'a0 \'a0NPROCS\'a0 \'a0PID USER COMMAND\
4026531835 cgroup\'a0 \'a0 299\'a0 \'a0 \'a01 root /usr/lib/systemd/systemd --switched...\
4026531837 user\'a0 \'a0 \'a0 278\'a0 \'a0 \'a01 root /usr/lib/systemd/systemd --switched...\
4026533105 mnt\'a0 \'a0 \'a0 \'a0 \'a01 29413 root ping 8.8.8.8\
4026533106 uts\'a0 \'a0 \'a0 \'a0 \'a01 29413 root ping 8.8.8.8\
4026533107 ipc\'a0 \'a0 \'a0 \'a0 \'a01 29413 root ping 8.8.8.8\
4026533108 pid\'a0 \'a0 \'a0 \'a0 \'a01 29413 root ping 8.8.8.8\
4026533110 net\'a0 \'a0 \'a0 \'a0 \'a01 29413 root ping 8.8.8.8\
\cb4 \

\f1\b USER
\f0\b0 \
1. This namespace is used to isolate users and groups in container\
	1. Done by allowing containers to have a different view of UID and GID ranges (as compared to host system)\
2. A software can run inside a container as a root user\
	1. If a hacker attacks container and escapes to host machine, it will have non-root identity\
\

\f1\b MNT
\f0\b0 \
1. The namespace lets container to have its own view of file system hierarchy on the system\
2. Mount points for each container can be found at /proc/<PID>/mounts on Linux\
\

\f1\b UTS (Unix Timesharing System)
\f0\b0 \
1. The namespace allows containers to have their own unique hostname and domain name\
2. A random ID is used as hostname in a container\
\
\cb3 nivedv@homelab ~]$ docker container run -it --name nived alpine sh\
\
/ # hostname\'a0\
9c9a5edabdd6\
/ #\'a0\
\
nivedv@homelab ~]$ sudo unshare -u sh\
\
sh-5.0# hostname isolated.hostname\'a0\
sh-5.0# hostname\
isolated.hostname\
sh-5.0#\'a0\
sh-5.0# exit\
exit\
[nivedv@homelab ~]$ hostname\
homelab.redhat.com\
\cb4 \
unshare - run program in new namespace (sh)\
	1. -u - unshare UTS namespace \
\

\f1\b IPC
\f0\b0 \
1. Inter-Process Communication namespace\
2. Gives access to \
	1. a shared range of memory or \
	2. a shared queue\
		for container processes to communicate\
\
\cb3 [root@demo /]# ipcmk -M 10M\
Shared memory id: 0\
[root@demo /]# ipcmk -M 20M\
Shared memory id: 1\
[root@demo /]#\'a0\
[root@demo /]# ipcs\
\
\
------ Message Queues --------\
key\'a0 \'a0 \'a0 \'a0 msqid\'a0 \'a0 \'a0 owner\'a0 \'a0 \'a0 perms\'a0 \'a0 \'a0 used-bytes\'a0 \'a0messages\'a0 \'a0\'a0\
\
\
------ Shared Memory Segments --------\
key\'a0 \'a0 \'a0 \'a0 shmid\'a0 \'a0 \'a0 owner\'a0 \'a0 \'a0 perms\'a0 \'a0 \'a0 bytes\'a0 \'a0 \'a0 nattch\'a0 \'a0 \'a0status\'a0 \'a0 \'a0\'a0\
0xd1df416a 0\'a0 \'a0 \'a0 \'a0 \'a0 root\'a0 \'a0 \'a0 \'a0644\'a0 \'a0 \'a0 \'a0 10485760\'a0 \'a00\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0\
0xbd487a9d 1\'a0 \'a0 \'a0 \'a0 \'a0 root\'a0 \'a0 \'a0 \'a0644\'a0 \'a0 \'a0 \'a0 20971520\'a0 \'a00\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0\
\
\
------ Semaphore Arrays --------\
key\'a0 \'a0 \'a0 \'a0 semid\'a0 \'a0 \'a0 owner\'a0 \'a0 \'a0 perms\'a0 \'a0 \'a0 nsems\'a0\cb4 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b \cf5 \cb1 ipcmk 
\f0\b0 \cf6 allows you to create System V inter-process communication\
       (IPC) objects: shared memory segments, message queues, and\
       semaphore arrays.\
	1. 
\f1\b \cf5 -M
\f0\b0 \cf6 , 
\f1\b \cf5 --shmem 
\f2\i\b0 \cf7 size\
		1. shared memory segment of size bytes\
\

\f1\i0\b \cf5 ipcs 
\f0\b0 \cf6 shows information on System V inter-process communication\
       facilities.  By default it shows information about all three\
       resources: shared memory segments, message queues, and semaphore\
       arrays.\
\

\f1\b PID
\f0\b0 \
1. Process ID namespace\
2. Ensures that processes running inside the container are isolated from external world\
	1. When we run a ps command inside, we only see processes running inside container\
		1. Because of the namespace\
\

\f1\b NET
\f0\b0 \
1. Network namespace\
2. Lets container have it\'92s own view of \
	1. Network interface\
	2. IP addresses\
	3. Routing tables\
	4. Port numbers\
	5. \'85\
\cf2 \cb4 3. To communicate to external world\
	1. A container will get attached to master docker0 interface\
\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \cb3 [nivedv@homelab ~]$ docker container run --rm -it alpine sh\
/ # ping 8.8.8.8\
PING 8.8.8.8 (8.8.8.8): 56 data bytes\
64 bytes from 8.8.8.8: seq=0 ttl=119 time=21.643 ms\
64 bytes from 8.8.8.8: seq=1 ttl=119 time=20.940 ms\
^C\
\
[root@homelab ~]# ip link show veth84ea6fc\
\
\
veth84ea6fc@if22: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue \
\
master docker0 state UP mode DEFAULT group default\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 \

\f1\b \cf6 \cb1 ip
\f0\b0  - show / manipulate routing, network devices, interfaces and tunnels\
\cf2 \cb4 	
\f1\b \cf5 \cb1 link   
\f0\b0 \cf6 - network device.\
\cf2 \cb4 	
\f1\b \cf5 \cb1 show 
\f0\b0 \cf6 (or 
\f1\b \cf5 list 
\f0\b0 \cf6 ) objects\cf2 \cb4 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b \cf2 Control groups (cgroups):
\f0\b0 \
1. Fundamental building blocks for making containers\
2. It allocates and limits resources used by containers\
	1. CPU\
	2. Memory\
	3. Network I/O\
3. Container engineer automatically defines cgroup filesystem of each type\
4. It is a linux kernel feature\
5. Allows processes to be organised into hierarchical groups\
	1. Used to limit and monitor usage of different types of resources\
6. grouping is implemented in kernel code\
7. cgroup:\
	1. Collection of processes bound to a set of limits  or parameters defined (via cgroup filesystem - an interface which is a pseudo-filesystem)\
8. subsystems: \
	1. Do resource tracking and implementation of limits\
		1. For\
			1. CPU\
			2. Memory\
			3. \'85\
	2. They are kernel components\
	3. They modify behaviour of processes in a cgroup\
		1. limiting amount of CPU time of a cgroup\
		2. limiting amount of memory of a cgroup\
		3. freezing and resuming execution of processes in a cgroup\
9. cgroup hierarchy\
	1. Constructed by creation, removal and renaming of subdirectories within the cgroup filesystem\
	2. Attributes (such as limits) can be defined at each level of the hierarchy\
	3. Constraint:\
		1. Limits, control, accounting defined by cgroup at higher level in hierarchy cannot be exceeded by descendent cgroups\
10. More info: https://man7.org/linux/man-pages/man7/cgroups.7.html\
\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \cb3 [root@homelab ~]# lscgroup | grep docker\
\
cpuset:/docker\
net_cls,net_prio:/docker\
cpu,cpuacct:/docker\
hugetlb:/docker\
devices:/docker\
freezer:/docker\
memory:/docker\
perf_event:/docker\
blkio:/docker\
pids:/docker\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 \
11. When a container is run, container runtime sets up cgroups values for each container\
12. All info is stored in 
\f1\b /sys/fs/cgroup/*/docker
\f0\b0 \
13. Example: To ensure that container can use 50,000 microseconds of CPU time, soft limit of memory to 500M and hard limit of memory to 1G\
\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \cb3 [root@homelab ~]# docker container run -d --name test-cgroups --cpus 0.5 --memory 1G --memory-reservation 500M httpd\
\
[root@homelab ~]# lscgroup cpu,cpuacct:/docker memory:/docker\
cpu,cpuacct:/docker/\
cpu,cpuacct:/docker/c3503ac704dafea3522d3bb82c77faff840018e857a2a7f669065f05c8b2cc84\
memory:/docker/\
memory:/docker/c3503ac704dafea3522d3bb82c77faff840018e857a2a7f669065f05c8b2cc84\
\
\
[root@homelab c....c84]# cat cpu.cfs_period_us\'a0\
100000\
[root@homelab c....c84]# cat cpu.cfs_quota_us\'a0\
50000\
\
\
[root@homelab c....c84]# cat memory.soft_limit_in_bytes\'a0\
524288000\
[root@homelab c....c84]# cat memory.limit_in_bytes\'a0\
1073741824\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 \
\pard\pardeftab720\sl360\partightenfactor0

\f1\b \cf2 SECCOMP
\f0\b0 \
1. Secure computing\
2. It is used to restrict the set of system calls that an application is allowed to make\
	1. Default seccomp profile disables 44 calls (out of 300+ calls)\
3. A container is allowed to access only those resources which it might need\
	1. Examples:\
		1. If a container must not change clock time on host machine\
			1. No access to 
\f1\b clock_adjtime
\f0\b0  & 
\f1\b clock_settime
\f0\b0  system calls\
		2. If a container must not change kernel modules\
			1. No access to 
\f1\b create_module
\f0\b0  & 
\f1\b delete_module
\f0\b0  system calls\
\

\f1\b SELINUX
\f0\b0 \
1. Security-enhanced Linux\
2. Limits application to\
	1. have access to its own files\
	2. Prevents other processes from accessing its files\
3. It limits the files it can affect and control\
4. How?\
	1. By setting contexts for files & processes\
	2. By defining policies (to enforce what a process can see and make changes to)\
		1. 
\f1\b container-selinux
\f0\b0  package is used to define policies for containers\
		2. Default:\
			1. Containers can read & execute under 
\f1\b /usr
\f0\b0 \
			2. Containers can read most content from 
\f1\b /etc
\f0\b0 \
 \
}