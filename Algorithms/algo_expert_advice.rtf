{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12780\viewh13760\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. Algorithms & Data Structures - \
    1. 45 minutes - 1 or 2 problems\
        1. problem can be solved conceptually and programmatically\
             1. Recognise common patterns quickly\
                  1. smart practice - know the best way to solve it\
                       1. algoexpert.io/clem - optimal, other ways\
2. Complexity analysis - O notation\
    1.  Can you do better?\
        1. space and time complexity\
3. Code\
    1. Quality code:\
	1. Name variables descriptively (not one letter names)\
	2. Don\'92t give `array` \'85\
	3. Abstraction\
		1. Helper methods\
			1. Repeating code\
	4. DRY\
	5. YAGNI - You arn\'92t going to need it (don\'92t write function that we are not going to use later)\
	6. Short comment - if function is not self descriptive (make functions self descriptive)\
		1. Code should be self descriptive\
	7. Write quality code during interviews\
		1. Do you get what you wrote before (a few weeks ago)?\
		2. Ask friends to check if they understand\
4. Problem solving ability:\
	1. algorithms:\
		1. Ask clarifying questions - purposefully ambiguous\
		2. Come up with a strategy that is logical and sound to solve the problems\
			1. Does the problem have two sub-problems that can be solved separately?\
				1. Max sum\
				2. Actual sub-sequence\
			2. Tackle one sub-problem before the other\
		3. Can we divide the problem into simpler sub-problems?\
			1. Dynamic programming?\
		4. Is there a naive solution to the problem that gives a hint to optimise it to get the best solution?\
		5. Come up with examples\
		6. Test solution with inputs (very important)\
5. Communication\
	1. Communication will dominate over algorithms and data structures\
	2. How?\
		1. Talk - vocalise the thoughts\
			1. Why debating?\
					1. Recursive or iterative\
		2. Don\'92t confuse interviewer\
			1. Don\'92t allow interviewer to make assumptions\
		3. Give signals to interviewer that you are not stuck if you need time\
			1. Prove what you are doing is good\
		4. If stuck\
			1. Summerise out loud\
				1. Express it and check if the interviewer understood it\
				2. Expect benefit of doubt to you (a hint to solution by showing you are right and know what you are doing but made a silly mistake)\
		5. Take a laptop to the interview\
		6. Use whiteboard to conceptualise and write tests \'85\
		7. We can code on laptop\
		8. We can go back and forth between laptop and whiteboard\
		9. Be very clear, logical in thought\
6. Googliness and Leadership\
	1. Behavioral type\
	2. To avoid:\
		1. Not arrogant\
		2. Don\'92t be offensive\
		3. \'85\
	3. Prove that you are a smart person who can be a great co-worker\
		1. Behavioral questions\
			1. Tell me about a time when you had conflict in a project and how did you handle it\
			2. Tell me about a time when you had success in a project and how did you measure the success\
			3. What is your contribution in the project\
			4. Tell me time when you missed a deadline on a project. How did you handle it?\
				1. How did you correct it later on\
		2. Be very familiar with the resume and be able to answer questions that people might ask about them\
			1. What you did on the project?\
			2. What was your role in the project?\
			3. Did something bad happen in the project?\
			4. Did something good happen in the project?\
		3. Give non-superficial answers\
		4. They want to know how I dealt with things when I was in the project\
	4. Smaller companies\
		1. Do research on the company\
			1. Be knowledgeable about their specific technology\
			2. Be interested in their technology\
			3. Make sure your personality and principles match theirs (about team page)\
\
\
\
\
}