{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red255\green255\blue10;\red255\green255\blue10;
\red255\green255\blue255;\red251\green2\blue7;\red33\green255\blue6;\red253\green128\blue8;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c99942\c98555\c0;\cssrgb\c99942\c98555\c0;
\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c14913\c0;\cssrgb\c0\c97680\c0;\cssrgb\c100000\c57637\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12600\viewh13840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\b\fs24 \cf0 \ul \ulc0 Boeing:
\i0\b0 \ulnone \

\b \cb2 Experienced Software Engineer - Full Stack Developer
\b0 \
1. Java\
	\cb3 1. Data Integration service with REST API\cb2 \
	2. Session and Exception Handler\
	3. JSON\
	4. XML\
\cb3 2. Architecting, Designing and Developing Full Stack Modules and Components\cb2 \
\cb3 3. Micro services based architecture\cb2 \
4. Spring boot\
	1. Polished, cohesive, effective, and user friendly API for large and complex aviation related systems\
5. Programming skills in latest tools & technology frameworks\
	1. Java/J2EE\
	\cb3 2. NodeJS\cb2 \
	\cb3 3. Javascript\cb2 \
	4. \'85\
6. Spring framework\
	1. REST\
	\cb3 2. GraphQL\cb2 \
	3. SOAP based Web Services\
	4. JPA\
7. APIs\
	\cb3 1. Swagger/Open API specifications\cb2 \
8. Automated test environments\
	1. TDD\
		1. JUnit (Mock, Mockito, \'85)\
9. Developing services (sync and \cb3 async\cb2 )\
	1. Microservices architecture based and using design patterns\
10. Azure Cloud: Developing and Deploying using PaaS services\
11. Python (nice to have)\
12. Messaging systems\
	1. Azure Event Hub OR\
	2. Kafka OR\
	3. RabbitMQ\
13. GIS (good to have) knowledge\
	1. Geographic Information System\
14. API Gateway\
15. SQL Databases (Postgres OR MySQL \'85)\
	1. Modeling\
	2. Writing Stored Procedures\
16. NoSQL Databases (Azure Cosmos DB OR MongoDB)\
17. Docker containers, Kubernetes, Helm artifacts\
	1. Azure Kubernetes Service\
18. CI/CD Automation\
	1. Git\
	2. Maven\
	3. Shell scripting\
19. Security\
20. Profiling and Tuning Performance\
21. DevOps environment\
22. C++ and Python\
\
\cb4 1. Python scripting (needs review)\cb1 \
\cb4 2. Python programming (needs review)\cb1 \
3. REST using Python (not much)\
4. Databases: \cb4 PostgreSQL\cb1 , \cb4 MongoDB\cb1 , \cb4 MySQL\cb1  (not much) - \cb4 (PostgreSQL Tutorial)\cb1 \
5. \cb4 Database design\cb1 , troubleshooting, management (very minimal) - \cb4 (Database Design Udemy course)\cb1 \
6. HTML\
7. CSS\
8. Javascript\
9. Web APIs\
10. JSON\
11. SPAs\
\cf5 \cb6 12. PWAs\cf0 \cb1 \
\cf5 \cb6 13. RWDs (Responsive Web Design)\cf0 \cb1 \
\cf5 \cb6 14. Webpack\cf0 \cb1 \
\cf5 \cb6 15. Babel\cf0 \cb1 \
\cf5 \cb6 16. Gulp\cf0 \cb1 \
17. npm\
18. \'85\
\cb7 19. Java/ J2EE\cb1 \
20. Spring\
\cf5 \cb6 21. JSF\cf0 \cb1 \
22. JMS\
\cb7 23. JPA / Hibernate\cb1 \
\cb4 24. Application Server (WebLogic)\cb1 \
\cb7 25. Docker/ Kubernetes (not much) - (DevOps Tools \'85 Udemy course)\cb1 \
26. Maven\
\cb4 27. Gradle (not much) - (Grade Udemy course)\cb1 \
28. JUnit\
29. Sonar\
30. \'85\
31. Node.js\
\cb4 32. Redux (not much)\cb1 \
\cb7 33. REST API principles\cb1 \
34. Web and Mobile Application (not much)\
35. Scrum/ Agile\
36. Cloud\
37. CI (GitLab CI, Jenkins, or Nexus)\
\cb4 38. Pair programming - (Martin Fowler\'92s pair programming)\cb1 \
\cb7 39. Test-driven development\cb1 \
40. CI\
\cb4 41. XP (no idea) - (Martin Fowler\'92s XP)\cb1 \
42. SaaS software development\
\cb4 43. Containerised micro services on Linux Platforms on Linux platforms (not much) - (DevOps Tools \'85 Udemy course)\cb1 \
\cb4 44. Scalability, availability, low-latency distributed systems (not much) - (System Design Book)\cb1 \
\
Associate Software Engineer\
1. Architecture\
2. Requirements\
3. Algorithms\
4. Interfaces\
5. Design\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \cb8 6. Verification plans\cb1 \
\cb8 7. Test procedures\cb1 \
\cb8 8. Test environments\cb1 \
\cb8 9. Test reporting\cb1 \
\cb8 10. R & D execution\cb1 \
\cb8 11. Software Domain expertise\cb1 \
12. System specific issues, processes, \cb8 regulations\cb1 \
13. Evaluation of software team, supplier performance (to ensure product and process conformance to project plans and industry standards)\
14. Agile\
15. Requirement/Design/Code/\cb8 Test reviews\cb1 \
16. Version control\
17. Software quality attributes\
	1. Testability\
	2. Portability\
	3. Maintainability\
18. Self driven and collaborative\
19. Timely communication of \cb8 risk, issues, opportunities\cb1 \
20. Skills:\
	1. \cb8 C, C++ (experience)\cb1 \
	2. Build, integration, debugging in\
		1. \cb8 Simulated environment\cb1 \
		2. \cb8 Integration environment\cb1 \
	3. Software development process\
	4. \cb8 Software verification process\cb1 \
	5. Systems thinking\
		1. Big picture\
		2. Inter-relationships between components of systems\
		3. Plan and anticipate future events\
	6. Containerisation (Docker, Kubernetes)\
	7. \cb8 Data - collect, summarise, synthesise, analyse, findings, conclusions, recommendations\cb1 \
	8. Agile - process and tools\
	9. Build and configuration management tools & processes\
	10. \cb8 Test processes\cb1 \
	11. \cb8 Automation strategy\cb1 \
	12. Functional requirements specification\
	13. Build and configuration management tools (Atlassian Tool Suite) & processes\
	14. \cb6 Embedded Avionics System Software Development\cb1 \
	15. \cb8 Validation/Verification\cb1 \
	16. \cb8 Functional Integration/ Certification\cb1 \
\
Associate DevOps Engineer\
1. Web application development\
2. Software Engineering Domain experience\
3. Communication & Presentation skills\
4. \cb4 Agile\cb1 \
5. Cross-functional team & external partners working experience\
6. High tolerance for organisational complexity, ability to work with partners from Boeing and outside\
	1. Different cultures and time zones\
7. Self-starter\
	1. Positive attitude\
	2. High ethics\
8. Strong analytical and creative problem solving skills\
9. Track record of working successfully under pressure in time-constrained environment\
10. No dependency or hand-holding\
11. Team player\
12. TDD\
13. \cb4 Pair programming\cb1 \
14. \cb4 Peer reviews\cb1 \
15. Work with software developers, project managers, business analysts\
16. Mentor juniors on technical aspects\
17. Develop internal competency & resources (for critical skill sets)\
18. Sought after expert\
19. Periodic updates to Boeing management\
	1. Progress report\
	2. Project summaries\
	3. \'85\
20. Coordinating and communicating with experts around the world\
21. \cb4 Research and recommend new technologies to improve product development activities\cb1 \
22. Travel domestically and internationally\
23. Skills\
	1. Design and develop full stack modules and components for web apps\
		1. Latest tools & technologies frameworks\
			1. \cb8 ReactJS\cb1 \
			2. \cb8 AngularJS\cb1 \
			3. \cb4 NodeJs\cb1 \
			4. \cb4 Bootstrap\cb1 \
			5. \cb4 HTML5\cb1 \
			6. \cb4 CSS3\cb1 \
			7. \cb4 JavaScript\cb1 \
			8. \cb4 JQuery\cb1 \
			9. Java8/J2EE\
			10. Docker\
			11. Kubernetes\
	2. DevOps activities\
	3. Automated test environments\
		1. TDD\
		2. JUnit\
	4. Spring\
	5. Docker\
	6. Kubernetes\
	7. REST & SOAP\
	8. \cb8 SOA\cb1 \
	9. \cb4 MySQL\cb1 \
	10. \cb4 PostgreSQL\cb1 \
	11. Microservices\
	12. \cb4 Amazon AWS\cb1  or Azure - plus\
	13. \cb4 Database modelling\cb1  (\cb4 MySQL/ NoSQL - MongoDB\cb1 )\
	14. Hands on experimentation, product evaluation, proof of concepts (with different technologies)\
	15. Build and deployment tools - CI/CD\
	16. SonarQube - Code quality, automatic reviews with static code analysis to detect bugs, code smells, security vulnerabilities\
	17. \cb6 Coverity tool\cb1  (static code analysis tool)\
	18. Ant, Maven, GIT , \cb4 Shell scripting\cb1 \
	19. Hibernate, JPA, \'85\
	20. \cb4 SQL, Stored procedures\cb1 \
	21. Maven, CI/CD with Jenkins\
	22. TDD best practices\
	23. Innovation & issue resolution\
	24. Monitoring implementation of design throughout system development lifecycle\
24. Desired skills\
	1. \cb4 Monitor implementation of architecture\cb1 \
	2. \cb6 Airline operations software applications\cb1  - plus\
	3. Collaborate with team\
	4. \cb6 NOTAMs\cb1 \
		1. Navigation databases\
		2. Flight planning and dispatch solutions\
		3. EFB applications\
		4. ARINC 633 format (ARINC standard)\
		5. Navigation maps (airport maps, obstacle, aviation databases)\
		6. eNOTAMS\
	5. \cb6 Airline flight operations and piloting procedures\cb1 \
	6. \cb6 FMS domain knowledge (Flight Management System)\cb1 \
	7. \cb6 Weather, Wind updates, GRIB, Navigation database, Notams, CRAM/CDR, Brief data on enroute charges and tracks, ACARS, Euro control B2B feeds\cb1 \
	8. \cb6 Airspace structure domain knowledge\cb1 \
	9. \cb6 Airline Operations Centre (AOC) domain\cb1 \
	10. \cb6 NOAA significant meteorological (SIGMET) processing\cb1 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\i\b \cf0 \ul Amazon
\i0\b0 \ulnone \
1. \cb7 Java\cb1  or C++ or C#\
2. \cb7 Architecture and Design\cb4  - (System Design Book)\cb1 \
	1. \cb4 Architecture\cb1 \
	2. \cb4 Design patterns\cb1 \
	3. \cb4 Reliability\cb1 \
	4. \cb4 Scaling\cb1 \
3. Building:\cb4  - (System Design Book)\cb1 \
	1. \cb4 Complex software systems\cb1 \
	2. \cb4 Highly scalable software systems\cb1 \
	3. \cb7 Delivered to customers\cb1 \
4. \cb4 Mobile platforms - (Android N course)\cb1 \
	1. Google Android\
5. \cb4 HW/SW design and architecture\cb1 \
6. \cb4 Graphics: UI Composition and Fluidity for mobile apps\cb1 \
7. \cb4 AWS - (DevOps tools \'85 Udemy Course)\cb1 \
8. Alexa Skills development\
9. \cb7 Professional practices\cb4  (Martin Fowler\'92s Articles, Clean Code)\cb1 \
	1. \cb4 SDLC\cb1 \
	2. \cb4 Coding standards\cb1 \
	3. \cb4 Code reviews\cb1 \
	4. SCM\
	5. Build processes\
	6. Testing\
	7. Operations\
\
Associate Cloud Application Developer\
1. UI for aviation related systems\
2. Architecting, designing and developing full stack modules and components for web applications\
	1. Tools and Technologies\
		1. Angular JS\
		2. Node JS\
		3. Bootstrap\
		4. HTML5\
		5. CSS3\
		6. JavaScript\
		7. JQuery\
		8. Java8/J2EE\
		9. \'85\
3. Automated Test Environments\
	1. TDD\
	2. JUnit\
4. \cb4 Sync and Async services using microservices architecture and design patterns\cb1 \
5. \cb4 Developing and deploying on Azure cloud (PaaS services)\cb1 \
6. \cb4 Azure functions\cb1 \
7. Spring framework\
8. REST & SOAP based web services\
9. JPA\
10. \cb4 Python (hands-on)\cb1 \
11. \cb4 Messaging systems\cb1 \
	1. Azure event hub\
	2. Kafka\
	3. RabbitMQ\
12. \cb4 SQL databases\cb1 \
	1. Stored procedures\
		1. Postgres/ MySQL/ \'85\
13. \cb4 NoSQL databases\cb1 \
	1. Azure Cosmos DB/ MongoDB\
14. Docker containers\
15. Kubernetes\
	1. \cb4 Azure Kubernetes Service\cb1 \
16. \cb4 Helm\cb1 \
17. CI/CD automation\
	1. Git\
	2. Maven\
	3. Shell scripting\
18. \cb4 OWASP - built in security\cb1 \
19. \cb4 Log management and monitoring using Azure\cb1 \
20. \cb4 OOA with Java and\cb1  \cb4 UML\cb1 \
21. Software design patterns\
22. \cb4 Standards and best practices\cb1 \
23. \cb4 Desire to conduct (in various technologies)\cb1 \
	1. hands-on-experimentation\
	2. product evaluations\
	3. POCs\
24. Rapidly learn and understand source code\
25. \cb4 Agile\cb1 \
26. \cb4 Problem solving skills\cb1 \
\

\i\b \ul PayPal (Software Architect)\

\i0\b0 \ulnone 1. Problem solving of complex & large scale problems\cb4  - (System Design Book)\cb1 \
2. \cb4 Data structures & algorithms - (Graph Algorithms Udemy Course, Leetcode)\cb1 \
3. Exposure to problem spaces & technologies\
4. \cb4 System design & OO skills - (System Design Book)\cb1 \
5. \cb4 Crafting clean interfaces\cb1 \
6. \cb4 Operate at right levels of abstraction - (Clean Code Book)\cb1 \
7. \cb4 Coding skills - (Leetcode, Projects)\cb1 \
8. \cb4 Drive teams through massive refactoring exercise - (Refactoring Tutorial)\cb1 \
9. \cb4 Improve coding standards across large code bases - (Martin Fowler\'92s articles, Clean code Book)\cb1 \
10. \cb4 Multi-tier architectures\cb1 \
11. \cb4 High performance micro-service scale\cb1  and \cb4 real-time response systems\cb1 \
12. Large scale persistent systems (databases)\cb4  - (System Design Book)\cb1 \
13. Product development lifecycle (inception to production, scaling up, new requirements, re-architectures)\
14. Large data handling or large transaction processing exposure\cb4  - (System Design Book, Streaming Data?, Big Data?)\cb1 \
15. \cb4 Mentoring\cb1 \
16. \cb4 Translate business requirements to functional specs\cb1 \
17. Lead team: \cb4 code reviews\cb1 , design approach, implementation\
18. Implementation, testing and deployment of web apps - with accessibility & internationalisation\
19. Collaboration with multiple teams for innovative solutions to business requirements\
\

\i\b \ul JP Morgan\

\i0\b0 \ulnone 1. Innovation\
2. Business analysis, development, maintenance, software improvement\cb4  - (Clean code book, Martin Fowler\'92s articles)\cb1  \
3. Java\
4. Spring\
5. J2EE\
\cb4 6. Database (SQL server or Oracle)\cb1 \
\cb4 7. Python\cb1 \
\cb4 8. Micro Services\cb1 \
\cb4 9. Cloud Computing\cb1 \
\

\i\b \ul Siemens
\i0\b0 \ulnone \
1. Produce architectural concepts\
2. Architecture meets business requirements\
3. Derive technical roadmap\cb4  - (TOGAF)\cb1 \
\cb4 4. Propose tech alternatives - (Learn Tools)\cb1 \
\cb4 5. Derive work packages & user stories from requirements - (TOGAF)\cb1 \
6. Support project planning\
	1. Estimation\
	2. Identification of integration points\
	3. Technical risks & mitigation\
7. Ensure testable design & test-automation design\
8. Participate in validation of implemented features\
9. Evaluate tools, technologies\cb4  - (Learn Tools)\cb1 \
10. Perform prototypes\
11. Coach and mentor project team regarding\
	1. Software design approach\cb4  - (Refactoring Tutorial)\cb1 \
	2. Technology\
	3. Tools\
	4. Methods\
	5. Software quality aspects\
12. Develop frameworks (if required) & code implementation for solution\
13. Advise in make or buy decisions\
\
1. 10+ years in Software Development\
2. 2 years as Software Architect\
3. App development on Windows and Linux platforms\
4. Design principles, tools, methods\
5. Distributed computing architectures, communication paradigms\
	1. REST\
	2. Web-Services\
	3. Microservices\
	4. \'85\
\cf5 \cb6 6. ESOA Platform (optional)\cf0 \cb1 \
7. Languages & toolkits:\
	1. Java\
	2. SQL\
	\cb4 3. BigData/ NoSQL\cb1 \
	4. REST APIs\
	5. HTML/ CSS\
	6. Angular/\cb4  React - (React Course, React Books, React Documentation)\cb1 \
	7. NodeJS\
	8. Python\
	9. Webservers\
	\cb4 10. Cloud-based apps/ services (AWS) - (DevOps tools \'85 Udemy Course)\cb1 \
	11. Architectural & design patterns\
	12. Modelling tools\
\

\i\b \ul PayPal (Software Engineer 3)
\i0\b0 \ulnone \
1. RESTful endpoints or other SOA endpoints\
2. Backend services in Java, Spring, Hibernate\
3. Java (others - C++, Python)\
4. Data Structures, Algorithmic techniques, Design patterns, best coding practices\cb4  - (Graph algorithms Udemy course, Design patterns book, Clean Code)\cb1 \
5. Curiosity of how things work and finding answers (adaptable to changing circumstances)\
\cb4 6. Relational Databases & NoSQL databases - (MongoDB Tutorial)\cb1 \
\cb4 7. Scalable and distributed Java services (to millions of users) - (System Design Book)\cb1 \
8. GitHub account or code samples with resume\
\

\i\b \ul Intel\

\i0\b0 \cb4 \ulnone 1. C/C++ & Python in Linux - (K&R for C, The Cherno Tutorial, C++ Udemy Course, C++ Book by Bjarne Stroustrup)\cb1 \
\cb4 2. AI & ML + Frameworks (Pytorch/ Tensorflow) - (ML Udemy Courses)\cb1 \
\cb4 3. Graph Theory & Graph Compilation\cb1 \
\cb4 4. Linux Device Drivers (User/ Kernel modes)\cb1 \
\cb4 5. Isolation of HW & SW issues quickly + Tools (GDB, Lauterbach) - (Linux Kernel Development Book, Linux Kernel and Driver Courses, Contribution to Linux Kernel)\cb1 \
\cb4 6. Linux based system software for AI data centre product line - (System Software Tutorial, System Software Books)\cb1 \
7. HW features from data sheets\cb4  - (Microprocessors Text Book, Intel Data Sheets)\cb1 \
8. Agile\
9. CI-CD + Jenkins \'85\
\

\i\b \ul Walmart\

\i0\b0 \cb4 \ulnone 1. Data Structures - (leetcode, Graph algorithms Udemy course)\cb1 \
\cb4 2. Algorithms - (leetcode, Graph algorithms Udemy course, CLRS)\cb1 \
\cb4 3. Design Patterns - (design patterns book)\cb1 \
4. Java\
5. Spring Boot\
\cb4 6. Microservices - (Microservices Book)\cb1 \
\cb4 7. Node Js - (Node JS course in Udemy)\cb1 \
8. Cloud Architecture (Azure)\cb4  - (AWS - DevOps Tools \'85 Udemy Course)\cb1 \
9. Microservice Architecture\
	1. Service Registry\
	2. ELK/ Splunk\cb4  - (ELK Stack Udemy Course)\cb1 \
	3. Microservices\
	\cb4 4. VMs - (Linux Kernel Udemy Course - Virtualisation)\cb1 \
	5. \'85\
10. Container Technologies:\cb4  - (AWS - DevOps Tools \'85 Udemy Course)\cb1 \
	1. Docker\
	2. Kubernetes\
\cb4 11. Agile methodologies - (Martin Fowler\'92s Articles)\cb1 \
12. DevOps\
13. CI-CD tools\
	1. Git\
	2. Maven\
	3. Jenkins\
	4. Docker\
	5. Kubernetes\
	6. Chef\
\cb4 14. End-to-end ownership for development and design of one cloud based project\cb1 \
15. Working knowledge of SQL & NoSQL\
	1. MySQL\
	\cb4 2. Mongo DB - (Learn Tools for System design)\cb1 \
	\cb4 3. HBase - (Learn Tools for System design)\cb1 \
	\cb4 4. Cassandra - (Learn Tools for System design)\cb1 \
	5. Oracle\
	\cb4 6. PostgreSQL - (PostgreSQL tutorial)\cb1 \
	7. Big Query\
16. TDD\
	1. JUnit\
	2. TestNG\
17. BDD\
	\cb4 1. Cucumber - (Cucumber Udemy Course)\cb1 \
	2. CI/CD .Karate\
	3. \'85\
18. Prototype technical solutions\
19. New and emerging tech\
20. Long term and short term design decisions\
\

\i\b \ul Philips
\i0\b0 \ulnone \
Software Technologist I\
1. Java\
2. J2EE\
3. Spring 3.0\
4. Hibernate\
5. Web Services (Restful and SOAP)\
6. OOAD\
7. UML\
8. Design Patterns\
9. Cloud computing\
10. Agile development\
11. Mentor team technically\
12. Strong investigation, analytical and problem solving skills\
13. Identify key technical risks and develop mitigation and recovery plan\
14. Event-driven architecture\
15. Workflow management\
16. Healthcare domain awareness\
\
Software Technologist I: Full Stack\
1. NodeJS, \cb8 ReactJS\cb1 , AngularJS, \'85\
2. Java\
3. \cb8 HTML\cb1 \
4. \cb8 XHTML\cb1 \
5. \cb8 CSS\cb1 \
6. \cb8 JavaScript\cb1 \
7. \cb8 JQuery\cb1 \
8. \cb8 Web 2.0 techniques\cb1 \
9. \cb8 JSP\cb1 \
10. \cb4 Servlets\cb1 \
11. Struts/ Spring\
12. \cb8 SOA\cb1 / Web Services - SOAP/ REST\
13. XML/ JSON\
14. Object Oriented Patterns and Principles\
15. \cb8 Usability Principles, cross-browser compatibility, HTML document architectures\cb1 \
16. Data structures fundamentals\
17. Lean/ agile software development\
18. Complex software systems development\
19. \cb4 Code quality practices\cb1 \
20. \cb4 Improving web latency in complex large scale deployments\cb1 \
21. \cb6 Healthcare standards and protocols (Dicom, HL7, \'85) - desired\cb1 \
22. \cb4 AWS - S3, Glacier, Vault, RDS, HSDP IAM - desired\cb1 \
23. \cb4 SSL, SSO, OAuth2 - desired\cb1 \
\

\i\b \ul LinkedIn
\i0\b0 \ulnone \
1. Infrastructure & Web services at large scale\
2. Expertise in Computer Science\
	1. Data structures\
	2. Algorithms\
	3. Software design\
3. Java/Scala or Python - coding skills\
	1. Ability to learn other coding languages\
4. Web applications & services\
	1. General development practices\
5. Ads Tech - desired\
\

\i\b \ul Disney - Hotstar
\i0\b0 \ulnone \
Principal Software Development Engineer\
1. Tech lead - demanding, cross functional projects\
2. Ensure quality of architecture and design of systems\
3. Functionally decompose complex problems into simple, straight-forward solutions\
4. Analyse and improve data quality and metrics\
5. Fully and completely understand system interdependencies and limitations\
6. Knowledge of internal and industry design decisions\
7. Assist in career development of others - mentor on advanced technical issues, help managers guide career growth of team\
8. Technical influence over multiple teams - to increase productivity, effectiveness (by sharing deep knowledge and experience)\
Skills:\
	1. 10+ years\
	2. 8+ years - large scalable systems\
	3. Architecting & building multi-threaded, distributed systems\
	4. Data structures, algorithms, \cb4 designing for performance\cb1 \
	5. Problem-solving ability\
	6. Achieve goals in highly innovative & fast paced environment\
	7. \cb4 Business judgement\cb1 , ability to influence others, analytical thinking skills\
	8. Hands-on as Principal-level software development engineer\
	9. Extensive experience mentoring junior engineers to success\
	10. \cb4 Entrepreneurial sprit\cb1  + willingness to have fun!\
\

\i\b \ul Walmart Global
\i0\b0 \ulnone \
Staff Software Engineer - Java\
1. \
\

\i\b \ul Siemens
\i0\b0 \ulnone \
Java with Azure or AWS Development\
1. 5+ years commercial Java experience\
2. Java\
3. J2EE\
4. Spring Boot\
5. Relational DB\
6. NoSQL DB\
7. Microservices\
8. Maven or Gradle\
9. Web Services (REST, SOAP)\
10. Git\
11. AWS or Azure\
	1. Deployment process\
12. Cloud Foundry - good to have\
\

\i\b \ul Google
\i0\b0 \ulnone \
Staff Software Engineer\
1. C/C++ or Java or Python or JavaScript or C# or Go or Objective-C or Swift\
\cb4 2. Architecting and developing distributed systems design\cb1 \
3. Technical leadership experience - leading project teams, setting technical direction\
\cb4 4. Architecting and developing solutions to ambiguous problems with significant impact\cb1 \
5. Expertise with one or more of:\
	1. Infrastructure\
	\cb4 2. Machine learning\cb1 \
	\cb4 3. Mobile application Development\cb1 \
	\cb4 4. Embedded Systems\cb1 \
	5. Front-end Development\
	\cb4 6. Security and Privacy\cb1 \
\cb4 6. Interest to learn other coding languages\cb1 \
\

\i\b \ul Intel
\i0\b0 \ulnone \
Technical Lead - Cloud Full Stack Development\
1. Full Stack Tech Lead - 8+ years (hand-on, large-scale cloud application software development, web-site development)\
2. Coding skills - Python, Java, REST APIs, Object Oriented Development, HTML5, CSS, and JavaScript (5+ years)\
3. Exposure to MVC and de-coupled web-tier architecture - 5+ years\
4. React.js, Angular, Spring framework\
5. AWS or Azure (Hands on)\
6. Virtualisation or containers (hands-on)\
7. Scaling container based applications (hands-on)\
	1. Microservices\
	2. Docker containers\
	\cb4 3. Open Container Initiative (OCI)\cb1 \
8. Container orchestration tools - Kubernetes, \cb4 Docker Swarm\cb1  (hands-on)\
9. Container networking, application deployment (CI/CD) (hands-on)\
10. Monitoring tools - Grafana, Splunk, \'85\
11. Linux - Ubuntu/CentOS\
12. OpenStack or OpenShift\
13. SQL, NoSQL\
14. C/Python (hands-on)\
15. RedHat OpenShift Container Platform (exposure)\
\

\i\b \ul Honeywell
\i0 \ulnone \

\b0 Advanced Software Engineer\
1. Cloud & Mobile software development - preferred\
2. Backend\
	1. Java Spring Framework\
	2. Node.js\
3. Front-end technologies - React.js or Angular.js (knowledge)\
4. NoSQL - Cassandra, Mongo\
5. Cloud - AWS\
6. Design Patterns\
7. Technical software documentation\
8. Agile\
	1. Scrum tools\
9. SCM\
	1. Branching\
	2. Code merges\
10. Skills\
	1. Language: \
		1.Java (8)\
		2. Groovy\
		3. Python\
		4. Node.js\
	2. Cloud\
		1. AWS or\
		2. Azure\
	3. Front-end\
		1. React.js\
		2. HTML\
		3. CSS\
		4. jQuery\
	4. Message queue (subscribe, publish, consume)\
		1. Kafka\
		2. Zookeeper\
	5. Database\
		1. Redis\
		2. Cassandra\
	6. Deployment\
		1. Kubernetes\
		2. Docker\
	7. CI/CD\
		1. GIT\
		2. Jenkins\
		3. Nexus\
		4. Maven\
	8. Monitoring\
		1. Prometheus\
		2. Grafana\
	9. Desired\
		1. REST & SOAP\
		2. Relational DB (SQL, ORM)\
		3. Scripting\
			1. Groovy\
			2. Python\
			3. \'85\
		4. CI/CD tools suite (plus)\
		5. JUnit\
		6. Kafka\
		7. Release strategies\
			1. to minimise or eliminate downtime\
		8. High velocity/tight deadline cloud-based applications\
\

\i\b \ul Oracle
\i0\b0 \ulnone \
1. Senior Member of Technical Staff\
	1.\cb4  Large scale, highly available distributed systems\cb1 \
	2. C, C++ or \cb4 Java\cb1 \
	3. \cb4 Python\cb1 , Perl, etc (scripting languages)\
	4. \cb4 Data structures\cb1 \
	5. \cb4 Algorithms\cb1 \
	6. \cb4 Operating Systems\cb1 \
	7. \cb4 Distributed systems fundamentals\cb1 \
	8. \cb4 Networking protocols (working familiarity) - TCP/IP, HTTP\cb1 \
	9. \cb4 Standard network architectures\cb1 \
	10. \cb4 Database - strong understanding\cb1 \
		1. \cb4 NoSQL\cb1 \
		2. \cb4 Storage technologies\cb1 \
		3. \cb4 Distributed persistence technologies\cb1 \
	11. Strong troubleshooting\
	12. Strong performance tuning\
	13. Operational support on \cb4 cloud\cb1  (plus)\
\

\i\b \ul Atlassian
\i0\b0 \ulnone \
Principal Software Engineer - Migration Platform Team\
	1. Highly scalable and performant RESTful micro-services\
	2. Any modern object oriented programming - Java, Kotlin\
	3. \cb4 Fluency in database technology (RDBMS (Oracle, Postgres and/or NoSQL (DynamoDB, Cassandra))\cb1 \
	4. Collaboration\
	5. DevOps (deep knowledge) - operational excellence\
	6. SaaS, PaaS, IaaS\
		1. \cb4 Hands on - AWS\cb1  or GAE or Azure\
	7. \cb4 Cloud architecture patterns\cb1 \
	8. Produce software with quality\
}