<map version="1.0.1">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1567402580696" ID="ID_1781431964" MODIFIED="1567402869851" TEXT="Performance Engineering of Software Systems">
<node CREATED="1567402878017" ID="ID_623652772" MODIFIED="1567402888659" POSITION="right" TEXT="Lecture 1: Matrix Multiply: A Case Study">
<node CREATED="1567405647999" ID="ID_238839769" MODIFIED="1567405649887" TEXT="Example">
<node CREATED="1567405658997" ID="ID_1754616927" MODIFIED="1567405662334" TEXT="Matrix Multiply">
<node CREATED="1567405694157" ID="ID_1334207721" MODIFIED="1567405703332" TEXT="Methodology of improving performance"/>
<node CREATED="1567405720005" ID="ID_606585210" MODIFIED="1567405777745" TEXT="C(i, j) = sigma_k in [0, p] A(i, k) * B(k, j)">
<node CREATED="1567407340431" ID="ID_1343318255" MODIFIED="1567407351433" TEXT="Object oriented">
<node CREATED="1567407351873" ID="ID_224222816" MODIFIED="1567407354202" TEXT="Immutable"/>
<node CREATED="1567407358369" ID="ID_889270125" MODIFIED="1567407364916" TEXT="Represent integers and doubles">
<node CREATED="1567407421781" ID="ID_222216610" MODIFIED="1567407425284" TEXT="Matrix">
<node CREATED="1567407426020" ID="ID_787188191" MODIFIED="1567407428796" TEXT="Matrix Row">
<node CREATED="1567407434339" ID="ID_1944010894" MODIFIED="1567407438691" TEXT="Integer Row"/>
<node CREATED="1567407439721" ID="ID_54651071" MODIFIED="1567407441828" TEXT="Double Row"/>
</node>
<node CREATED="1567407429170" ID="ID_1899058964" MODIFIED="1567407430828" TEXT="Value"/>
<node CREATED="1567407746564" ID="ID_1011373573" MODIFIED="1567407750416" TEXT="Usage">
<node CREATED="1567407750758" ID="ID_419509442" MODIFIED="1567407766123" TEXT="Matrix A = new Matrix(x, y, MatrixType.FLOATING_POINT);"/>
</node>
<node CREATED="1567407795638" ID="ID_1973025024" MODIFIED="1567407797815" TEXT="Performance">
<node CREATED="1567407798042" ID="ID_901408772" MODIFIED="1567407804997" TEXT="1024 x 1024">
<node CREATED="1567407805461" ID="ID_1929731999" MODIFIED="1567407815222" TEXT="Is the performance good?">
<node CREATED="1567407815452" ID="ID_566004655" MODIFIED="1567407822196" TEXT="To know that we have a problem is a huge win"/>
</node>
<node CREATED="1567407826642" ID="ID_1901115535" MODIFIED="1567407828126" TEXT="5h">
<node CREATED="1567407833646" ID="ID_670126062" MODIFIED="1567407836109" TEXT="n^3"/>
</node>
</node>
</node>
<node CREATED="1567407859169" ID="ID_666131285" MODIFIED="1567407860936" TEXT="Steps">
<node CREATED="1567407861168" ID="ID_68462482" MODIFIED="1567407872720" TEXT="operations">
<node CREATED="1567407872952" ID="ID_1121541264" MODIFIED="1567407879137" TEXT="multiply"/>
<node CREATED="1567407881361" ID="ID_54856162" MODIFIED="1567407882097" TEXT="add"/>
<node CREATED="1567407882365" ID="ID_1886875377" MODIFIED="1567407885809" TEXT="3 index updates"/>
<node CREATED="1567407888700" ID="ID_741596728" MODIFIED="1567407891081" TEXT="branch check">
<node CREATED="1567407891367" ID="ID_537551488" MODIFIED="1567407893664" TEXT="6 ops"/>
</node>
</node>
</node>
<node CREATED="1567407920985" ID="ID_1013964202" MODIFIED="1567407924264" TEXT="Ops per second">
<node CREATED="1567407924599" ID="ID_1415994647" MODIFIED="1567407935791" TEXT="3.15 x 10^9 cycles/second">
<node CREATED="1567407940480" ID="ID_613021877" MODIFIED="1567407954801" TEXT="8358 cycles per each visible operation"/>
</node>
<node CREATED="1567407971706" ID="ID_1246581783" MODIFIED="1567407990341" TEXT="Back of the envelope">
<node CREATED="1567407993041" ID="ID_1816966975" MODIFIED="1567407997102" TEXT="Theoretically"/>
</node>
</node>
<node CREATED="1567408009716" ID="ID_489046302" MODIFIED="1567408019466" TEXT="How to improve the performance?">
<node CREATED="1567408019681" ID="ID_309361815" MODIFIED="1567408021781" TEXT="Profiling">
<node CREATED="1567408025453" ID="ID_1268191589" MODIFIED="1567408037981" TEXT="Look deeply into the program execution"/>
<node CREATED="1567408038388" ID="ID_1889642495" MODIFIED="1567408045711" TEXT="Find out where you are spending your time">
<node CREATED="1567408048754" ID="ID_1490506006" MODIFIED="1567408050389" TEXT="By method"/>
<node CREATED="1567408050595" ID="ID_1348927799" MODIFIED="1567408051886" TEXT="By line"/>
</node>
<node CREATED="1567408786433" ID="ID_806358196" MODIFIED="1567408793923" TEXT="Lot of interesting information">
<node CREATED="1567408795252" ID="ID_1865415898" MODIFIED="1567408798989" TEXT="Time spent"/>
<node CREATED="1567408800086" ID="ID_1004023114" MODIFIED="1567408805236" TEXT="Cumulative time spent"/>
<node CREATED="1567408805603" ID="ID_740815665" MODIFIED="1567408810101" TEXT="Number of invocations"/>
<node CREATED="1567408810310" ID="ID_1277926103" MODIFIED="1567408813524" TEXT="..."/>
</node>
<node CREATED="1567408860866" ID="ID_1557109210" MODIFIED="1567408872313" TEXT="Great way to zero in on what matters - Hotspots">
<node CREATED="1567408874454" ID="ID_1741084867" MODIFIED="1567408902047" TEXT="If 90% time is in one routine, inefficiencies in the rest of the program doesn&apos;t matter"/>
<node CREATED="1567408903374" ID="ID_1718600699" MODIFIED="1567408917711" TEXT="Also, is the hotspots doing what you expect them to do?"/>
</node>
<node CREATED="1567408937805" ID="ID_745504832" MODIFIED="1567408952607" TEXT="Results">
<node CREATED="1567408952852" ID="ID_1703920268" MODIFIED="1567408962456" TEXT="Most time is spent in creation of doubles">
<node CREATED="1567408962735" ID="ID_508814554" MODIFIED="1567408969799" TEXT="number of calls is huge">
<node CREATED="1567408970163" ID="ID_1289745831" MODIFIED="1567408976614" TEXT="3,157,263"/>
<node CREATED="1567408979986" ID="ID_804519959" MODIFIED="1567408982183" TEXT="Method time">
<node CREATED="1567408982380" ID="ID_666566276" MODIFIED="1567408987386" TEXT="53,100"/>
</node>
</node>
<node CREATED="1567409020971" ID="ID_619503453" MODIFIED="1567409025167" TEXT="What is the problem?">
<node CREATED="1567409025365" ID="ID_129743502" MODIFIED="1567409036101" TEXT="Why am I initializing values if I am just multiplying?">
<node CREATED="1567409053549" ID="ID_486837742" MODIFIED="1567409055165" TEXT="Issue?">
<node CREATED="1567409055349" ID="ID_617218445" MODIFIED="1567409059158" TEXT="Immutability">
<node CREATED="1567409062102" ID="ID_1030301229" MODIFIED="1567409075424" TEXT="Update one location -&gt; copy of the matrix">
<node CREATED="1567409099628" ID="ID_1709413409" MODIFIED="1567409127340" TEXT="If a value in a row needs to be changed then copy only that row ">
<node CREATED="1567409145372" ID="ID_588694883" MODIFIED="1567409152394" TEXT="2 * N copies for each update">
<node CREATED="1567409173102" ID="ID_214791414" MODIFIED="1567409182707" TEXT="N^3 updates -&gt; N^4 copies are made">
<node CREATED="1567409205245" ID="ID_435741214" MODIFIED="1567409207804" TEXT="Problems">
<node CREATED="1567409208022" ID="ID_1002979442" MODIFIED="1567409212708" TEXT="Cost of making duplicates"/>
<node CREATED="1567409212915" ID="ID_1146873246" MODIFIED="1567409222171" TEXT="Cost of garbage collecting the freed objects"/>
<node CREATED="1567409222361" ID="ID_1738731567" MODIFIED="1567409227285" TEXT="Huge memory footprint"/>
</node>
<node CREATED="1567409245654" ID="ID_1298759192" MODIFIED="1567409250328" TEXT="Solution">
<node CREATED="1567409250853" ID="ID_1380745681" MODIFIED="1567409254445" TEXT="Can we do better?">
<node CREATED="1567409254726" ID="ID_1432015815" MODIFIED="1567409261047" TEXT="Get rid of immutability">
<node CREATED="1567409307746" ID="ID_1867595222" MODIFIED="1567409313519" TEXT="Performance improvement">
<node CREATED="1567409313774" ID="ID_806550182" MODIFIED="1567409321996" TEXT="219.7x">
<node CREATED="1567427395932" ID="ID_943808385" MODIFIED="1567427401978" TEXT="N^4 -&gt; N^3"/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567409285651" ID="ID_1614526215" MODIFIED="1567409290589" TEXT="Object oriented"/>
</node>
</node>
<node CREATED="1567430549844" ID="ID_1727175437" MODIFIED="1567430561176" TEXT="Time spent for get double and get">
<node CREATED="1567430570069" ID="ID_879209000" MODIFIED="1567430582529" TEXT="Issues are with Dynamic Dispatch">
<node CREATED="1567430583640" ID="ID_876683597" MODIFIED="1567430587185" TEXT="Method call overhead">
<node CREATED="1567430587557" ID="ID_1872554769" MODIFIED="1567430600512" TEXT="Multiple subtypes -&gt; what method to call depends on the object"/>
<node CREATED="1567430601113" ID="ID_1461426828" MODIFIED="1567430619425" TEXT="Each method call needs to loop-up the object type in a dispatch table">
<node CREATED="1567430690813" ID="ID_1254914338" MODIFIED="1567430698029" TEXT="Indirect branches are costly">
<node CREATED="1567430698306" ID="ID_716887021" MODIFIED="1567430706585" TEXT="Modern microprocessors are deeply pipelined">
<node CREATED="1567430706849" ID="ID_1294551298" MODIFIED="1567430719562" TEXT="12 pipeline stages in core 2 duo, 20 in Pentium 4"/>
<node CREATED="1567430732329" ID="ID_954459501" MODIFIED="1567430741266" TEXT="i.e. hundreds of instructions in flight">
<node CREATED="1567430886610" ID="ID_425295716" MODIFIED="1567430896568" TEXT="I cannot go further until the previous instruction is resolved">
<node CREATED="1567430899931" ID="ID_105429145" MODIFIED="1567430905386" TEXT="Machine slows down a lot">
<node CREATED="1567430927420" ID="ID_1301708216" MODIFIED="1567430940762" TEXT="We need to fetch, test, and only then fetch the next instruction"/>
</node>
</node>
</node>
</node>
<node CREATED="1567430842740" ID="ID_1430186684" MODIFIED="1567430853842" TEXT="I don&apos;t know where I am going until I do that check"/>
</node>
<node CREATED="1567430968735" ID="ID_1686071953" MODIFIED="1567430973157" TEXT="Direct branch">
<node CREATED="1567431049929" ID="ID_376410051" MODIFIED="1567431069832" TEXT="Target address is known">
<node CREATED="1567431070219" ID="ID_912290701" MODIFIED="1567431078889" TEXT="We can fetch ahead from target"/>
</node>
<node CREATED="1567431092228" ID="ID_498042147" MODIFIED="1567431104812" TEXT="works for conditional branches by predicting the branch">
<node CREATED="1567431264943" ID="ID_510348019" MODIFIED="1567431275796" TEXT="We can also fetch both options"/>
</node>
</node>
<node CREATED="1567431008075" ID="ID_1184695838" MODIFIED="1567431012264" TEXT="Normal instructions">
<node CREATED="1567431012580" ID="ID_416146515" MODIFIED="1567431019902" TEXT="keep fetching the next instructions"/>
<node CREATED="1567430973390" ID="ID_423368039" MODIFIED="1567431007800" TEXT="Need to be able to keep fetching next instructions before executing them"/>
</node>
<node CREATED="1567431218977" ID="ID_527348539" MODIFIED="1567431223056" TEXT="Indirect branch">
<node CREATED="1567431223392" ID="ID_253582066" MODIFIED="1567431228638" TEXT="target is unknown">
<node CREATED="1567431229805" ID="ID_112089563" MODIFIED="1567431239035" TEXT="need to wait until address fetch completes"/>
</node>
</node>
<node CREATED="1567432663365" ID="ID_336521909" MODIFIED="1567432666023" TEXT="Solution">
<node CREATED="1567432666376" ID="ID_54501713" MODIFIED="1567432690000" TEXT="integers, doubles -&gt; doubles only">
<node CREATED="1567432714606" ID="ID_1335657089" MODIFIED="1567432717839" TEXT="Improvement">
<node CREATED="1567432718032" ID="ID_980449002" MODIFIED="1567432720479" TEXT="2.4x">
<node CREATED="1567432730934" ID="ID_470686421" MODIFIED="1567432735423" TEXT="about 500x in total"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567430624474" ID="ID_1970175657" MODIFIED="1567430637898" TEXT="Dynamic dispatch is an address lookup + indirect branch">
<node CREATED="1567430825049" ID="ID_1953530014" MODIFIED="1567430833514" TEXT="Direct call has become indirect branch"/>
</node>
</node>
</node>
</node>
<node CREATED="1567432771624" ID="ID_1001903668" MODIFIED="1567432777633" TEXT="Matrix get">
<node CREATED="1567432786537" ID="ID_27637635" MODIFIED="1567432805182" TEXT="Issues with Object Oriented">
<node CREATED="1567432806054" ID="ID_751523184" MODIFIED="1567432810750" TEXT="Memory fragmentation">
<node CREATED="1567432811733" ID="ID_1438866057" MODIFIED="1567432822014" TEXT="Objects are allocated independently"/>
<node CREATED="1567432823336" ID="ID_638783309" MODIFIED="1567432827638" TEXT="All over memory">
<node CREATED="1567432855061" ID="ID_1166232346" MODIFIED="1567432858870" TEXT="need pointer chase">
<node CREATED="1567432859131" ID="ID_555981681" MODIFIED="1567432863255" TEXT="like in linked list"/>
</node>
</node>
<node CREATED="1567432828839" ID="ID_1055987314" MODIFIED="1567432844246" TEXT="If contiguous in memory -&gt; getting to the next is just an index increment"/>
</node>
</node>
<node CREATED="1567432877711" ID="ID_1400448302" MODIFIED="1567432879214" TEXT="Solution">
<node CREATED="1567432880197" ID="ID_1777435409" MODIFIED="1567432888806" TEXT="Get rid of object orientedness">
<node CREATED="1567432891508" ID="ID_955126313" MODIFIED="1567432899535" TEXT="Performance">
<node CREATED="1567432899800" ID="ID_1066885402" MODIFIED="1567432902022" TEXT="2.2x"/>
</node>
</node>
</node>
</node>
<node CREATED="1567432912256" ID="ID_1168293755" MODIFIED="1567432914608" TEXT="Java">
<node CREATED="1567432915820" ID="ID_1240861881" MODIFIED="1567432919871" TEXT="Java overheads">
<node CREATED="1567432920104" ID="ID_1909846739" MODIFIED="1567432923824" TEXT="Memory bounds check"/>
<node CREATED="1567432924837" ID="ID_834521349" MODIFIED="1567432942584" TEXT="Bytecode first interpreted and then JITed (fast compilation, no time to generate the best code)"/>
</node>
<node CREATED="1567432944160" ID="ID_735807478" MODIFIED="1567432946888" TEXT="C">
<node CREATED="1567432947182" ID="ID_1771039945" MODIFIED="1567432952625" TEXT="No such thing in C"/>
<node CREATED="1567432953078" ID="ID_1064381236" MODIFIED="1567432967012" TEXT="Intel C compiler compiles the program directly into x86 assembly"/>
<node CREATED="1567433007714" ID="ID_1837532925" MODIFIED="1567433016638" TEXT="Performance">
<node CREATED="1567433016973" ID="ID_429929700" MODIFIED="1567433019030" TEXT="2.1x">
<node CREATED="1567433019356" ID="ID_1890729960" MODIFIED="1567433024030" TEXT="Going from Java to C"/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567433156624" ID="ID_1148178584" MODIFIED="1567433198040" TEXT="Going into the nittigrity at the hardware level">
<node CREATED="1567433199654" ID="ID_437511505" MODIFIED="1567433205767" TEXT="Profiling with Performance Counters">
<node CREATED="1567433205988" ID="ID_717798742" MODIFIED="1567433214240" TEXT="Modern hardware counts &quot;events&quot;">
<node CREATED="1567433217663" ID="ID_1928116794" MODIFIED="1567433230017" TEXT="This gives lot more information than execution time"/>
<node CREATED="1567433245048" ID="ID_1938725577" MODIFIED="1567433254220" TEXT="We can get a feel for what is happening at hardware">
<node CREATED="1567433262965" ID="ID_1701341282" MODIFIED="1567433266967" TEXT="CPI">
<node CREATED="1567433267545" ID="ID_54153287" MODIFIED="1567433272574" TEXT="Clock cycles per instructions">
<node CREATED="1567433276696" ID="ID_1285707655" MODIFIED="1567433302238" TEXT="stalling instructions can be detected">
<node CREATED="1567433302470" ID="ID_1952035022" MODIFIED="1567433310840" TEXT="instructions taking too many cycles"/>
</node>
</node>
</node>
<node CREATED="1567433285220" ID="ID_737316399" MODIFIED="1567433332608" TEXT="L1 and L2 Cache Miss Rate">
<node CREATED="1567433333290" ID="ID_637787648" MODIFIED="1567433352737" TEXT="Are your accesses using the cache well or is the cache misbehaving?"/>
</node>
<node CREATED="1567433358037" ID="ID_781541794" MODIFIED="1567433361630" TEXT="Instructions Retired">
<node CREATED="1567433366239" ID="ID_1591561016" MODIFIED="1567433374504" TEXT="How many instructions got executed">
<node CREATED="1567433377438" ID="ID_581758783" MODIFIED="1567433383630" TEXT="If we are doing too much work">
<node CREATED="1567433383855" ID="ID_1307468189" MODIFIED="1567433393532" TEXT="number of instructions retired might go high"/>
</node>
</node>
</node>
<node CREATED="1567433458673" ID="ID_1258406743" MODIFIED="1567433460811" TEXT="Examples">
<node CREATED="1567433467369" ID="ID_1510292662" MODIFIED="1567433468770" TEXT="CPI">
<node CREATED="1567433469794" ID="ID_603679709" MODIFIED="1567433473010" TEXT="4.78"/>
</node>
<node CREATED="1567433475272" ID="ID_1938264868" MODIFIED="1567433479490" TEXT="L1 Miss Rate">
<node CREATED="1567433479722" ID="ID_933156979" MODIFIED="1567433483395" TEXT="0.24"/>
</node>
<node CREATED="1567433484431" ID="ID_352719532" MODIFIED="1567433487555" TEXT="L2 Miss Rate">
<node CREATED="1567433487831" ID="ID_867283549" MODIFIED="1567433490747" TEXT="0.02"/>
</node>
<node CREATED="1567433491935" ID="ID_1204193795" MODIFIED="1567433497875" TEXT="Percent SSE Instructions">
<node CREATED="1567433498194" ID="ID_427393093" MODIFIED="1567433501123" TEXT="43%"/>
</node>
<node CREATED="1567433502296" ID="ID_1326334563" MODIFIED="1567433506211" TEXT="Instructions Retired">
<node CREATED="1567433506712" ID="ID_1287238539" MODIFIED="1567433517612" TEXT="13,137,250,000"/>
</node>
</node>
<node CREATED="1567433550052" ID="ID_842296231" MODIFIED="1567433551917" TEXT="Problems">
<node CREATED="1567433552206" ID="ID_890695808" MODIFIED="1567433590284" TEXT="a value in A needs going through columns of C ">
<node CREATED="1567433590667" ID="ID_1936417445" MODIFIED="1567433657887" TEXT="each value is away and all the values are not in the same cache block">
<node CREATED="1567433670217" ID="ID_1540830711" MODIFIED="1567433678608" TEXT="Since memory is linear (not 2D)"/>
</node>
</node>
<node CREATED="1567433786891" ID="ID_1920124384" MODIFIED="1567433788428" TEXT="Solution">
<node CREATED="1567433789061" ID="ID_91564699" MODIFIED="1567433803110" TEXT="Preprocessing of Data">
<node CREATED="1567433803568" ID="ID_1373683787" MODIFIED="1567433809514" TEXT="n^3 computations"/>
<node CREATED="1567433810009" ID="ID_1547837404" MODIFIED="1567433813971" TEXT="n^2 data">
<node CREATED="1567433855571" ID="ID_432429913" MODIFIED="1567433862940" TEXT="Do some n^2 processing">
<node CREATED="1567433863184" ID="ID_565143048" MODIFIED="1567433866882" TEXT="Transpose">
<node CREATED="1567433867080" ID="ID_1022642200" MODIFIED="1567433870202" TEXT="Before multiply"/>
<node CREATED="1567433970307" ID="ID_292653250" MODIFIED="1567433972669" TEXT="Implementation">
<node CREATED="1567433973853" ID="ID_1526771003" MODIFIED="1567433987325" TEXT="One matrix doesn&apos;t have good cache behavior">
<node CREATED="1567433987764" ID="ID_1378734993" MODIFIED="1567433990709" TEXT="Transpose the matrix">
<node CREATED="1567433995740" ID="ID_473198216" MODIFIED="1567434008499" TEXT="Makes main matrix multiply loop run faster"/>
</node>
</node>
</node>
</node>
<node CREATED="1567433935307" ID="ID_1474851354" MODIFIED="1567433945249" TEXT="Can make n^3 happen faster"/>
</node>
<node CREATED="1567434040054" ID="ID_227705071" MODIFIED="1567434041865" TEXT="Performance">
<node CREATED="1567434042274" ID="ID_1147356560" MODIFIED="1567434045417" TEXT="3.4x">
<node CREATED="1567434062472" ID="ID_1149686702" MODIFIED="1567434069666" TEXT="Almost 1 CPI">
<node CREATED="1567434087779" ID="ID_1336383062" MODIFIED="1567434089277" TEXT="CPI">
<node CREATED="1567434089278" ID="ID_1297189292" MODIFIED="1567434093324" TEXT="1.13"/>
</node>
</node>
<node CREATED="1567434094738" ID="ID_1630219928" MODIFIED="1567434096851" TEXT="L1">
<node CREATED="1567434097683" ID="ID_1059527332" MODIFIED="1567434099828" TEXT="0.15"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567433886368" ID="ID_153385398" MODIFIED="1567433888727" TEXT="Note:">
<node CREATED="1567433889038" ID="ID_1852950607" MODIFIED="1567433906025" TEXT="Think if we can do some pre-processing that is cheaper which may improve performance">
<font BOLD="true" NAME="SansSerif" SIZE="12"/>
</node>
</node>
</node>
<node CREATED="1567433689413" ID="ID_313703542" MODIFIED="1567433698032" TEXT="For B, it is contiguous">
<node CREATED="1567433704824" ID="ID_1568320987" MODIFIED="1567433713591" TEXT="Contiguous accesses are better">
<node CREATED="1567433714632" ID="ID_1158317061" MODIFIED="1567433730505" TEXT="Data fetch as cache line (Core 2 Duo 64 byte L2 Cache Line)"/>
<node CREATED="1567433739397" ID="ID_1169894855" MODIFIED="1567433743488" TEXT="Contiguous data">
<node CREATED="1567433743741" ID="ID_1802159106" MODIFIED="1567433755270" TEXT="single cache fetch supports 8 reads of doubles"/>
</node>
</node>
</node>
<node CREATED="1567434191075" ID="ID_871649089" MODIFIED="1567434195461" TEXT="Memory System">
<node CREATED="1567434196252" ID="ID_1257830636" MODIFIED="1567434201157" TEXT="Memory System Dilemma">
<node CREATED="1567434201358" ID="ID_241231717" MODIFIED="1567434210542" TEXT="Small amount of memory -&gt; fast access">
<node CREATED="1567434252972" ID="ID_1421226865" MODIFIED="1567434254180" TEXT="Cache"/>
</node>
<node CREATED="1567434210919" ID="ID_1274950759" MODIFIED="1567434223571" TEXT="Large amount of memory -&gt; slow access">
<node CREATED="1567434255333" ID="ID_960048120" MODIFIED="1567434259476" TEXT="Main Memory"/>
<node CREATED="1567434260010" ID="ID_1238398280" MODIFIED="1567434264814" TEXT="Hard Disk"/>
</node>
<node CREATED="1567434224659" ID="ID_1371669340" MODIFIED="1567434236278" TEXT="How do you have a lot of memory and access them very fast">
<node CREATED="1567434245548" ID="ID_1312173301" MODIFIED="1567434284693" TEXT="Cache System">
<node CREATED="1567434289194" ID="ID_1790251177" MODIFIED="1567434373508" TEXT="Processor_i -&gt; L1_i(64KB) -&gt; L2(2MB) -&gt; L3 (16MB) -&gt; Mem (GB)">
<node CREATED="1567434439954" ID="ID_543166285" MODIFIED="1567434447192" TEXT="As we go down, it is slower">
<node CREATED="1567434447786" ID="ID_249329514" MODIFIED="1567434455042" TEXT="Solution">
<node CREATED="1567434455432" ID="ID_302995086" MODIFIED="1567434478572" TEXT="Get as much data as possible in L1"/>
</node>
<node CREATED="1567434486012" ID="ID_934601227" MODIFIED="1567434490857" TEXT="Cycles">
<node CREATED="1567434491182" ID="ID_1594215763" MODIFIED="1567434500338" TEXT="Processor -&gt; L1">
<node CREATED="1567434500575" ID="ID_276391095" MODIFIED="1567434502313" TEXT="1 cycle"/>
</node>
<node CREATED="1567434503631" ID="ID_521232710" MODIFIED="1567434506601" TEXT="L1 -&gt; L2">
<node CREATED="1567434506945" ID="ID_1843949563" MODIFIED="1567434509704" TEXT="3 cycles"/>
</node>
<node CREATED="1567434510561" ID="ID_105656923" MODIFIED="1567434515992" TEXT="L2 -&gt; L3">
<node CREATED="1567434516559" ID="ID_568125805" MODIFIED="1567434519594" TEXT="14 cycles"/>
</node>
<node CREATED="1567434520346" ID="ID_435804674" MODIFIED="1567434523306" TEXT="L3 -&gt; Mem">
<node CREATED="1567434523690" ID="ID_601807995" MODIFIED="1567434528906" TEXT="100+ cycles"/>
</node>
</node>
</node>
</node>
<node CREATED="1567434385235" ID="ID_828491496" MODIFIED="1567434388739" TEXT="Cache hierarchy">
<node CREATED="1567434389562" ID="ID_957020600" MODIFIED="1567434407638" TEXT="Store most probable accesses in small amount of memory with fast access"/>
<node CREATED="1567434408730" ID="ID_1442122345" MODIFIED="1567434424787" TEXT="Hardware heuristics determine what will be in each cache and when"/>
<node CREATED="1567434611991" ID="ID_1338448779" MODIFIED="1567434625302" TEXT="Caches are temperamental">
<node CREATED="1567434626781" ID="ID_467791594" MODIFIED="1567434647473" TEXT="If the access pattern matches heuristics of the hardware">
<node CREATED="1567434653665" ID="ID_91467058" MODIFIED="1567434657168" TEXT="blazingly fast"/>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567434984998" ID="ID_446583050" MODIFIED="1567434986748" TEXT="Solution">
<node CREATED="1567434987226" ID="ID_1214620807" MODIFIED="1567434990909" TEXT="Data Reuse">
<node CREATED="1567434991922" ID="ID_969614501" MODIFIED="1567435008953" TEXT="Change of computation order can reduce the # of loads to cache">
<node CREATED="1567435012366" ID="ID_1365468639" MODIFIED="1567435024656" TEXT="Calculating a row (1024 values of A)">
<node CREATED="1567435026201" ID="ID_145104355" MODIFIED="1567435076151" TEXT="A:1024 * 1 = 1024 + B:384*1=394 + C:1024*384=393216=394524">
<node CREATED="1567435213583" ID="ID_620182165" MODIFIED="1567435223435" TEXT="To get one row of A, I should use the entire C!!!"/>
</node>
</node>
<node CREATED="1567435100678" ID="ID_1403448271" MODIFIED="1567435117479" TEXT="Blocked Matrix Multiply (32^2 = 1024 values of A)">
<node CREATED="1567435120192" ID="ID_1847293563" MODIFIED="1567435170896" TEXT="A:32*32 = 1024 + B:384*32 = 12284 + C:32*384 = 12284 = 25600">
<node CREATED="1567435246261" ID="ID_1645639068" MODIFIED="1567435253300" TEXT="32 x 32 of A">
<node CREATED="1567435256178" ID="ID_208700085" MODIFIED="1567435265236" TEXT="I have looked at only 25600 elements!"/>
</node>
</node>
<node CREATED="1567435277065" ID="ID_1291212328" MODIFIED="1567435285800" TEXT="We can calculate blocks that fits in cache"/>
</node>
<node CREATED="1567435314051" ID="ID_1018871531" MODIFIED="1567435316197" TEXT="Solution">
<node CREATED="1567435316650" ID="ID_1875706095" MODIFIED="1567435320909" TEXT="Changing the program">
<node CREATED="1567435321147" ID="ID_1003594489" MODIFIED="1567435328197" TEXT="Many ways to get same result">
<node CREATED="1567435328412" ID="ID_1969088977" MODIFIED="1567435333827" TEXT="Change the execution order"/>
<node CREATED="1567435334430" ID="ID_578806704" MODIFIED="1567435339581" TEXT="Change the algorithm"/>
<node CREATED="1567435340743" ID="ID_108506262" MODIFIED="1567435345603" TEXT="Change the data structures"/>
</node>
<node CREATED="1567435371865" ID="ID_11817405" MODIFIED="1567435379280" TEXT="Some changes can perturb the results">
<node CREATED="1567435379521" ID="ID_1746898868" MODIFIED="1567435390240" TEXT="Select a different but equivalent answer"/>
<node CREATED="1567435391977" ID="ID_437465935" MODIFIED="1567435398167" TEXT="Reorder arithmetic operations">
<node CREATED="1567435399306" ID="ID_498846140" MODIFIED="1567435426819" TEXT="(a + b) + c != a + (b + c)">
<node CREATED="1567435454347" ID="ID_618726911" MODIFIED="1567435461219" TEXT="May not match exactly"/>
</node>
</node>
<node CREATED="1567435428265" ID="ID_465983268" MODIFIED="1567435434835" TEXT="Drop/ change precision"/>
<node CREATED="1567435435932" ID="ID_799980336" MODIFIED="1567435445214" TEXT="Operate within an acceptable error range"/>
</node>
<node CREATED="1567435545638" ID="ID_59713289" MODIFIED="1567435548000" TEXT="Performance">
<node CREATED="1567435548489" ID="ID_1366881824" MODIFIED="1567435550960" TEXT="1.7x">
<node CREATED="1567435554303" ID="ID_1751750611" MODIFIED="1567435555855" TEXT="CPI">
<node CREATED="1567435556162" ID="ID_1924682739" MODIFIED="1567435600807" TEXT="0.49">
<node CREATED="1567435602818" ID="ID_39704892" MODIFIED="1567435607599" TEXT="3x improvement"/>
</node>
</node>
<node CREATED="1567435576149" ID="ID_1055714789" MODIFIED="1567435577479" TEXT="L1">
<node CREATED="1567435578019" ID="ID_437802176" MODIFIED="1567435580543" TEXT="Miss rate">
<node CREATED="1567435580765" ID="ID_635760489" MODIFIED="1567435583752" TEXT="0.02">
<node CREATED="1567435585107" ID="ID_1288705345" MODIFIED="1567435587415" TEXT="Gone down">
<node CREATED="1567435589590" ID="ID_1446356761" MODIFIED="1567435594967" TEXT="8x improvement"/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567435626886" ID="ID_128877354" MODIFIED="1567435631584" TEXT="Other optimizations">
<node CREATED="1567435631887" ID="ID_853285197" MODIFIED="1567435637647" TEXT="Instruction Level Optimizations">
<node CREATED="1567435637908" ID="ID_1246587803" MODIFIED="1567435649415" TEXT="Modern processors have many other performance tricks">
<node CREATED="1567435649693" ID="ID_330051906" MODIFIED="1567435657125" TEXT="Instruction level parallelism">
<node CREATED="1567435658391" ID="ID_1695012253" MODIFIED="1567435663856" TEXT="2 integer"/>
<node CREATED="1567435664520" ID="ID_1521826664" MODIFIED="1567435667824" TEXT="2 floating point"/>
<node CREATED="1567435668175" ID="ID_299620737" MODIFIED="1567435672208" TEXT="1 MMX/SSE">
<node CREATED="1567435725920" ID="ID_771956020" MODIFIED="1567435728886" TEXT="Vector instructions"/>
</node>
</node>
<node CREATED="1567435674455" ID="ID_1725643886" MODIFIED="1567435681681" TEXT="MMX/SSE Instructions">
<node CREATED="1567435681957" ID="ID_1877278610" MODIFIED="1567435700561" TEXT="Can do the same operation on multiple contiguous data at the same time"/>
</node>
<node CREATED="1567435702961" ID="ID_1433149088" MODIFIED="1567435705745" TEXT="Cache hierarchy"/>
<node CREATED="1567435706755" ID="ID_1499130841" MODIFIED="1567435712305" TEXT="Prefetching of data"/>
</node>
<node CREATED="1567435738197" ID="ID_980351328" MODIFIED="1567435741852" TEXT="Nudge the compiler">
<node CREATED="1567435752310" ID="ID_1351829705" MODIFIED="1567435762717" TEXT="Need to nudge the compiler to generate the vector code">
<node CREATED="1567435764014" ID="ID_1532425217" MODIFIED="1567435771168" TEXT="Removed any perceived dependencies"/>
<node CREATED="1567435811278" ID="ID_978908294" MODIFIED="1567435820878" TEXT="Bound most constant variables to the constant"/>
</node>
<node CREATED="1567435831226" ID="ID_1403398915" MODIFIED="1567435838829" TEXT="Play with compiler flags">
<node CREATED="1567435839028" ID="ID_881150522" MODIFIED="1567435843645" TEXT="icc --help"/>
<node CREATED="1567435843925" ID="ID_489632743" MODIFIED="1567435848613" TEXT="Find the best flags">
<node CREATED="1567435848908" ID="ID_1714459468" MODIFIED="1567435861004" TEXT="icc -c -O3 -xT -msse3 mxm.c"/>
</node>
<node CREATED="1567435863989" ID="ID_1268854775" MODIFIED="1567435871674" TEXT="Use information from icc">
<node CREATED="1567435873508" ID="ID_1100990969" MODIFIED="1567435882014" TEXT="icc -vec-report5 ..."/>
</node>
<node CREATED="1567435883403" ID="ID_873566494" MODIFIED="1567435889678" TEXT="Generate assembly and stare!">
<node CREATED="1567435890548" ID="ID_1460712540" MODIFIED="1567435904590" TEXT="icc -S -fsource-asm -fverbose-asm ...">
<node CREATED="1567435966780" ID="ID_186516839" MODIFIED="1567435974046" TEXT="Everything is converted into SSE"/>
</node>
</node>
<node CREATED="1567435914974" ID="ID_1931058311" MODIFIED="1567435926599" TEXT="Tweaked the program until the compiler is happy"/>
</node>
<node CREATED="1567435987430" ID="ID_1288208289" MODIFIED="1567435991584" TEXT="Performance">
<node CREATED="1567435992174" ID="ID_1735977261" MODIFIED="1567436002431" TEXT="2.8x">
<node CREATED="1567436020787" ID="ID_1338376854" MODIFIED="1567436021999" TEXT="CPI">
<node CREATED="1567436022544" ID="ID_554439567" MODIFIED="1567436076285" TEXT="0.9">
<node CREATED="1567436079159" ID="ID_1908623611" MODIFIED="1567436080605" TEXT="SSE"/>
</node>
</node>
<node CREATED="1567436084140" ID="ID_1708483601" MODIFIED="1567436086950" TEXT="L1">
<node CREATED="1567436087193" ID="ID_898058737" MODIFIED="1567436094174" TEXT="0.07">
<node CREATED="1567436100584" ID="ID_1797086581" MODIFIED="1567436102567" TEXT="Gone up"/>
</node>
</node>
<node CREATED="1567436103713" ID="ID_1590723313" MODIFIED="1567436110799" TEXT="Percent SSE Instructions">
<node CREATED="1567436111247" ID="ID_422216873" MODIFIED="1567436180211" TEXT="88%">
<node CREATED="1567436126160" ID="ID_759457657" MODIFIED="1567436130447" TEXT="Lot less instructions">
<node CREATED="1567436131294" ID="ID_1429531627" MODIFIED="1567436138009" TEXT="4 ops done in one instruction"/>
</node>
</node>
</node>
</node>
<node CREATED="1567436146435" ID="ID_1147085288" MODIFIED="1567436166696" TEXT="Even though the instructions are running a little slower, the amortized cost is very high (very few instructions)"/>
</node>
</node>
<node CREATED="1567435795683" ID="ID_741768953" MODIFIED="1567435799109" TEXT="Writing assembly code">
<node CREATED="1567435799404" ID="ID_902888335" MODIFIED="1567435804606" TEXT="Very involved and complex"/>
</node>
</node>
</node>
</node>
<node CREATED="1567436053606" ID="ID_1274835291" MODIFIED="1567436056509" TEXT="Finally">
<node CREATED="1567436056756" ID="ID_1875505960" MODIFIED="1567436060983" TEXT="30000x"/>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567408824170" ID="ID_1818213271" MODIFIED="1567408827164" TEXT="Intuition">
<node CREATED="1567408827509" ID="ID_1405156688" MODIFIED="1567408836178" TEXT="We usually have a feel for what it should be"/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567436206933" ID="ID_1068549712" MODIFIED="1567436212908" TEXT="Tuned Libraries">
<node CREATED="1567436213185" ID="ID_1912841192" MODIFIED="1567436216092" TEXT="BLAS Library">
<node CREATED="1567436216325" ID="ID_1367002732" MODIFIED="1567436231477" TEXT="Hand tuned library in C/assembly to take the full advantage of hardware">
<node CREATED="1567436233428" ID="ID_102054497" MODIFIED="1567436240051" TEXT="http://www.netlib.org/blas/"/>
<node CREATED="1567436241186" ID="ID_449773280" MODIFIED="1567436257508" TEXT="http://ressim.berlios.de/"/>
</node>
</node>
<node CREATED="1567436274209" ID="ID_1948443763" MODIFIED="1567436280555" TEXT="Intel Math Kernel Library">
<node CREATED="1567436280868" ID="ID_1990064207" MODIFIED="1567436303045" TEXT="Experts at Intel figuring out how to get the maximum performance for commonly used math routines"/>
<node CREATED="1567436304268" ID="ID_426350028" MODIFIED="1567436316693" TEXT="They have a specially tuned BLAS library for x86">
<node CREATED="1567436331385" ID="ID_942481205" MODIFIED="1567436338402" TEXT="Another 2.7x">
<node CREATED="1567436338953" ID="ID_1453251939" MODIFIED="1567436340234" TEXT="CPI">
<node CREATED="1567436340495" ID="ID_12292210" MODIFIED="1567436350180" TEXT="0.37"/>
</node>
<node CREATED="1567436351457" ID="ID_323533643" MODIFIED="1567436352540" TEXT="SSE">
<node CREATED="1567436352788" ID="ID_1463127105" MODIFIED="1567436355795" TEXT="78%"/>
</node>
<node CREATED="1567436381781" ID="ID_365177535" MODIFIED="1567436387597" TEXT="L1">
<node CREATED="1567436387963" ID="ID_963555700" MODIFIED="1567436390780" TEXT="0.02">
<node CREATED="1567436391036" ID="ID_1406252860" MODIFIED="1567436395157" TEXT="may be pre-fetching"/>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567436429816" ID="ID_21846345" MODIFIED="1567436434794" TEXT="Parallel Execution">
<node CREATED="1567436435264" ID="ID_1338399908" MODIFIED="1567436440079" TEXT="Multicores are here">
<node CREATED="1567436440333" ID="ID_181133196" MODIFIED="1567436448496" TEXT="2 to 6 cores in a processor"/>
<node CREATED="1567436449775" ID="ID_935753640" MODIFIED="1567436456516" TEXT="1 to 4 processors in a box"/>
<node CREATED="1567436457058" ID="ID_965785095" MODIFIED="1567436475399" TEXT="Cloud machines have 2 processors with 6 cores each (total 12 cores)"/>
</node>
<node CREATED="1567436507914" ID="ID_813971511" MODIFIED="1567436519902" TEXT="Use concurrency for parallel execution">
<node CREATED="1567436520233" ID="ID_1383388566" MODIFIED="1567436536571" TEXT="Divide the computation of multiple independent/concurrent computations"/>
<node CREATED="1567436537697" ID="ID_996446842" MODIFIED="1567436544219" TEXT="Run the computations in parallel"/>
<node CREATED="1567436545264" ID="ID_559830053" MODIFIED="1567436550819" TEXT="Synchronize at the end"/>
</node>
<node CREATED="1567437571123" ID="ID_660565468" MODIFIED="1567437578403" TEXT="Issues with Parallelism">
<node CREATED="1567437578699" ID="ID_1336910562" MODIFIED="1567437585115" TEXT="Amdhal&apos;s Law">
<node CREATED="1567437586267" ID="ID_161266355" MODIFIED="1567437625557" TEXT="Any computation can be analyzed in terms of a portion that must be executed sequentially, Ts, and a portion that can be executed in parallel, Tp, then for n processors">
<node CREATED="1567437634647" ID="ID_1424226404" MODIFIED="1567437641165" TEXT="T(n) = Tx + Tp/n"/>
<node CREATED="1567437644308" ID="ID_1293569814" MODIFIED="1567437675531" TEXT="T(infinity) = Ts, thus maximum speedup (Ts + Tp)/Ts">
<node CREATED="1567437721080" ID="ID_880651014" MODIFIED="1567437732436" TEXT="90% is parallel">
<node CREATED="1567437732684" ID="ID_91621988" MODIFIED="1567437737165" TEXT="Max: 10%"/>
</node>
</node>
</node>
</node>
<node CREATED="1567437742766" ID="ID_387842640" MODIFIED="1567437745804" TEXT="Load Balancing">
<node CREATED="1567437749012" ID="ID_106191925" MODIFIED="1567437766491" TEXT="The work is distributed among processors so that all processors are kept busy all of the time"/>
</node>
<node CREATED="1567437778436" ID="ID_828806581" MODIFIED="1567437781054" TEXT="Granularity">
<node CREATED="1567437781358" ID="ID_1098362983" MODIFIED="1567437814559" TEXT="The size of the parallel regions between synchronizations or the ratio of computation (useful work) to communication (overhead)">
<node CREATED="1567437851029" ID="ID_1882493825" MODIFIED="1567437857355" TEXT="To start parallelism is big task">
<node CREATED="1567437861062" ID="ID_134724909" MODIFIED="1567437863591" TEXT="Expensive">
<node CREATED="1567437864336" ID="ID_888622262" MODIFIED="1567437869311" TEXT="If work is too small"/>
<node CREATED="1567437870020" ID="ID_1349100846" MODIFIED="1567437874590" TEXT="Start and stop is overhead"/>
</node>
</node>
</node>
<node CREATED="1567437887075" ID="ID_1211965022" MODIFIED="1567437888570" TEXT="Problem">
<node CREATED="1567437891600" ID="ID_588866444" MODIFIED="1567437902913" TEXT="Parallelization may cause slowdown"/>
</node>
</node>
</node>
<node CREATED="1567437922315" ID="ID_1512211071" MODIFIED="1567437924082" TEXT="Matrix">
<node CREATED="1567437924305" ID="ID_572344831" MODIFIED="1567437926331" TEXT="Two parts">
<node CREATED="1567437930669" ID="ID_880754361" MODIFIED="1567437933179" TEXT="3.5x">
<node CREATED="1567438002337" ID="ID_806336083" MODIFIED="1567438004384" TEXT="CPI">
<node CREATED="1567438004599" ID="ID_153554291" MODIFIED="1567438006729" TEXT="1/36"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567438086934" ID="ID_723490504" MODIFIED="1567438088510" TEXT="Summary">
<node CREATED="1567438377763" ID="ID_1751152095" MODIFIED="1567438384593" TEXT="BLAS Parallel">
<node CREATED="1567438384909" ID="ID_420504547" MODIFIED="1567438393778" TEXT="296000x"/>
</node>
<node CREATED="1567438412889" ID="ID_710522857" MODIFIED="1567438501471" TEXT="There are a lot of room for performance improvements!">
<node CREATED="1567438426617" ID="ID_1254599262" MODIFIED="1567438446679" TEXT="Matrix Multiply is an exception, other programs may not yield gains this large"/>
<node CREATED="1567438450600" ID="ID_1211900180" MODIFIED="1567438473130" TEXT="That said, in Matrix Multiply from Immutable to Parallel BLAS 296,260x improvement"/>
<node CREATED="1567438474718" ID="ID_1366804181" MODIFIED="1567438486201" TEXT="In comparison Miles per Gallon improvement"/>
<node CREATED="1567438504196" ID="ID_1930353886" MODIFIED="1567438530930" TEXT="Need to have a good understanding on what the hardware and underlying software is doing"/>
<node CREATED="1567438536168" ID="ID_1581850979" MODIFIED="1567438538547" TEXT="Applications">
<node CREATED="1567438538830" ID="ID_1019610981" MODIFIED="1567438542987" TEXT="Data centers">
<node CREATED="1567438543212" ID="ID_1767047445" MODIFIED="1567438552715" TEXT="They are burning a lot of energy">
<node CREATED="1567438553124" ID="ID_865359412" MODIFIED="1567438561282" TEXT="We can look at reducing that">
<node CREATED="1567438608731" ID="ID_369904314" MODIFIED="1567438613876" TEXT="10% less is huge"/>
</node>
</node>
</node>
<node CREATED="1567438624661" ID="ID_1140046713" MODIFIED="1567438628037" TEXT="Power consumption"/>
<node CREATED="1567438636470" ID="ID_1213983664" MODIFIED="1567438644187" TEXT="Currency can be saved to buy something else">
<node CREATED="1567438652003" ID="ID_982596785" MODIFIED="1567438667410" TEXT="If we want to add a feature, it should not slow down a program"/>
</node>
<node CREATED="1567438674745" ID="ID_1123753976" MODIFIED="1567438676513" TEXT="Scaling">
<node CREATED="1567438684497" ID="ID_589771289" MODIFIED="1567438697449" TEXT="Fewer cloud resources">
<node CREATED="1567438697690" ID="ID_299327341" MODIFIED="1567438706096" TEXT="More money can be saved"/>
</node>
</node>
</node>
<node CREATED="1567438580897" ID="ID_1646144721" MODIFIED="1567438588909" TEXT="What to think">
<node CREATED="1567438594660" ID="ID_202204237" MODIFIED="1567438599723" TEXT="Correctness"/>
<node CREATED="1567438600189" ID="ID_397058394" MODIFIED="1567438603124" TEXT="Performance"/>
</node>
</node>
<node CREATED="1567438713571" ID="ID_1383483309" MODIFIED="1567438718219" TEXT="What are we going to learn">
<node CREATED="1567438724563" ID="ID_1679743882" MODIFIED="1567438726698" TEXT="Architecture">
<node CREATED="1567438727001" ID="ID_1390732774" MODIFIED="1567438746915" TEXT="Looking at architectural issues, identifying why something is wrong?"/>
<node CREATED="1567438759226" ID="ID_843253862" MODIFIED="1567438761723" TEXT="Parallelism"/>
</node>
<node CREATED="1567438750539" ID="ID_248831508" MODIFIED="1567438755164" TEXT="Algorithmic issues"/>
<node CREATED="1567438762948" ID="ID_405613237" MODIFIED="1567438763914" TEXT="Tools">
<node CREATED="1567438764185" ID="ID_1713455586" MODIFIED="1567438773069" TEXT="To know something has gone wrong"/>
</node>
</node>
</node>
</node>
<node CREATED="1567402889721" ID="ID_1361347997" MODIFIED="1567402895165" POSITION="left" TEXT="Lecture 2: Bit Hacks"/>
<node CREATED="1567402896203" ID="ID_913810876" MODIFIED="1567402912236" POSITION="right" TEXT="Lecture 3: Basic Performance Engineering"/>
<node CREATED="1567402913106" ID="ID_1551470920" MODIFIED="1567402926423" POSITION="left" TEXT="Lecture 4: Computer Architecture and Performance Engineering"/>
<node CREATED="1567402931195" ID="ID_641670157" MODIFIED="1567402940850" POSITION="right" TEXT="Industry Mentor (MITPOSSE) Overview"/>
<node CREATED="1567402941694" ID="ID_996522732" MODIFIED="1567403050208" POSITION="left" TEXT="Lecture 5: Performance Engineering with Profiling Tools"/>
<node CREATED="1567403051232" ID="ID_296759086" MODIFIED="1567403058145" POSITION="right" TEXT="Lecture 6: C to Assembly"/>
<node CREATED="1567403058986" ID="ID_350746129" MODIFIED="1567403076238" POSITION="left" TEXT="Lecture 7: Memory Systems and Performance Engineering"/>
<node CREATED="1567403076941" ID="ID_1564873114" MODIFIED="1567403087516" POSITION="right" TEXT="Lecture 8: Cache-Efficient Algorithms"/>
<node CREATED="1567403088643" ID="ID_1879959287" MODIFIED="1567403097881" POSITION="left" TEXT="Lecture 9: Cache-Efficient Algorithms II"/>
<node CREATED="1567403098608" ID="ID_1564012290" MODIFIED="1567403109363" POSITION="right" TEXT="Lecture 10: Dynamic Storage Allocation"/>
<node CREATED="1567403110147" ID="ID_1457262281" MODIFIED="1567403122688" POSITION="left" TEXT="Lecture 11: What Compilers Can and Cannot Do"/>
<node CREATED="1567403123377" ID="ID_914714952" MODIFIED="1567403130915" POSITION="right" TEXT="Lecture 12: Multicore Programming"/>
<node CREATED="1567403131623" ID="ID_130962530" MODIFIED="1567403140162" POSITION="left" TEXT="Lecture 13: Parallelism and Performance"/>
<node CREATED="1567403140738" ID="ID_502296409" MODIFIED="1567403154771" POSITION="right" TEXT="Lecture 14: Analysis of Multithreaded Algorithms"/>
<node CREATED="1567403157634" ID="ID_524167238" MODIFIED="1567403166442" POSITION="left" TEXT="Lecture 15: Nondeterministic Programming"/>
<node CREATED="1567403247084" ID="ID_1543284942" MODIFIED="1567403256229" POSITION="right" TEXT="Lecture 16: Synchronizing without Locks"/>
<node CREATED="1567403257028" ID="ID_1425318579" MODIFIED="1567403265817" POSITION="left" TEXT="Lecture 17: Performance Issues in Parallelism"/>
<node CREATED="1567403266403" ID="ID_1758894819" MODIFIED="1567403278856" POSITION="right" TEXT="Lecture 18: Primer on Ray Tracing Techniques"/>
<node CREATED="1567403282043" ID="ID_685681834" MODIFIED="1567403294774" POSITION="left" TEXT="Lecture 19: How TokuDB Fractal Tree Indexes Work"/>
<node CREATED="1567403295460" ID="ID_927821344" MODIFIED="1567403302893" POSITION="right" TEXT="Lecture 20: Distributed Systems"/>
<node CREATED="1567403303546" ID="ID_683497069" MODIFIED="1567403311096" POSITION="left" TEXT="Lecture 21: Quiz 2 Review"/>
<node CREATED="1567403311731" ID="ID_1945287518" MODIFIED="1567403331721" POSITION="right" TEXT="Lecture 22: A Tale of 10 Bugs: Performance Engineering at VMware"/>
<node CREATED="1567403332479" ID="ID_126815055" MODIFIED="1567403343191" POSITION="left" TEXT="Lecture 23: Final Competition and Student Feedback"/>
</node>
</map>
